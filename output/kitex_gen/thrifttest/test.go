// Code generated by thriftgo (0.1.2). DO NOT EDIT.

package thrifttest

import (
	"bytes"
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

const (
	MyNumberz = Numberz_ONE
)

type Numberz int64

const (
	Numberz_ONE   Numberz = 1
	Numberz_TWO   Numberz = 2
	Numberz_THREE Numberz = 3
	Numberz_FIVE  Numberz = 5
	Numberz_SIX   Numberz = 6
	Numberz_EIGHT Numberz = 8
)

func (p Numberz) String() string {
	switch p {
	case Numberz_ONE:
		return "ONE"
	case Numberz_TWO:
		return "TWO"
	case Numberz_THREE:
		return "THREE"
	case Numberz_FIVE:
		return "FIVE"
	case Numberz_SIX:
		return "SIX"
	case Numberz_EIGHT:
		return "EIGHT"
	}
	return "<UNSET>"
}

func NumberzFromString(s string) (Numberz, error) {
	switch s {
	case "ONE":
		return Numberz_ONE, nil
	case "TWO":
		return Numberz_TWO, nil
	case "THREE":
		return Numberz_THREE, nil
	case "FIVE":
		return Numberz_FIVE, nil
	case "SIX":
		return Numberz_SIX, nil
	case "EIGHT":
		return Numberz_EIGHT, nil
	}
	return Numberz(0), fmt.Errorf("not a valid Numberz string")
}

func NumberzPtr(v Numberz) *Numberz { return &v }

func (p *Numberz) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = Numberz(result.Int64)
	return
}

func (p *Numberz) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type UserId = int64

type MapType = map[string]*Bonk

type Bonk struct {
	Message string `thrift:"message,1" json:"message"`
	Type    int32  `thrift:"type,2" json:"type"`
}

func NewBonk() *Bonk {
	return &Bonk{}
}

func (p *Bonk) GetMessage() string {
	return p.Message
}

func (p *Bonk) GetType() int32 {
	return p.Type
}
func (p *Bonk) SetMessage(val string) {
	p.Message = val
}
func (p *Bonk) SetType(val int32) {
	p.Type = val
}

var fieldIDToName_Bonk = map[int16]string{
	1: "message",
	2: "type",
}

func (p *Bonk) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Bonk[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Bonk) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *Bonk) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Type = v
	}
	return nil
}

func (p *Bonk) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Bonk"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Bonk) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Bonk) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Bonk) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Bonk(%+v)", *p)
}

func (p *Bonk) DeepEqual(ano *Bonk) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Message) {
		return false
	}
	if !p.Field2DeepEqual(ano.Type) {
		return false
	}
	return true
}

func (p *Bonk) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}
func (p *Bonk) Field2DeepEqual(src int32) bool {

	if p.Type != src {
		return false
	}
	return true
}

type Bools struct {
	ImTrue  bool `thrift:"im_true,1" json:"im_true"`
	ImFalse bool `thrift:"im_false,2" json:"im_false"`
}

func NewBools() *Bools {
	return &Bools{}
}

func (p *Bools) GetImTrue() bool {
	return p.ImTrue
}

func (p *Bools) GetImFalse() bool {
	return p.ImFalse
}
func (p *Bools) SetImTrue(val bool) {
	p.ImTrue = val
}
func (p *Bools) SetImFalse(val bool) {
	p.ImFalse = val
}

var fieldIDToName_Bools = map[int16]string{
	1: "im_true",
	2: "im_false",
}

func (p *Bools) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Bools[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Bools) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.ImTrue = v
	}
	return nil
}

func (p *Bools) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.ImFalse = v
	}
	return nil
}

func (p *Bools) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Bools"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Bools) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("im_true", thrift.BOOL, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.ImTrue); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Bools) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("im_false", thrift.BOOL, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.ImFalse); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Bools) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Bools(%+v)", *p)
}

func (p *Bools) DeepEqual(ano *Bools) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ImTrue) {
		return false
	}
	if !p.Field2DeepEqual(ano.ImFalse) {
		return false
	}
	return true
}

func (p *Bools) Field1DeepEqual(src bool) bool {

	if p.ImTrue != src {
		return false
	}
	return true
}
func (p *Bools) Field2DeepEqual(src bool) bool {

	if p.ImFalse != src {
		return false
	}
	return true
}

type Xtruct struct {
	StringThing string `thrift:"string_thing,1" json:"string_thing"`
	ByteThing   int8   `thrift:"byte_thing,4" json:"byte_thing"`
	I32Thing    int32  `thrift:"i32_thing,9" json:"i32_thing"`
	I64Thing    int64  `thrift:"i64_thing,11" json:"i64_thing"`
}

func NewXtruct() *Xtruct {
	return &Xtruct{}
}

func (p *Xtruct) GetStringThing() string {
	return p.StringThing
}

func (p *Xtruct) GetByteThing() int8 {
	return p.ByteThing
}

func (p *Xtruct) GetI32Thing() int32 {
	return p.I32Thing
}

func (p *Xtruct) GetI64Thing() int64 {
	return p.I64Thing
}
func (p *Xtruct) SetStringThing(val string) {
	p.StringThing = val
}
func (p *Xtruct) SetByteThing(val int8) {
	p.ByteThing = val
}
func (p *Xtruct) SetI32Thing(val int32) {
	p.I32Thing = val
}
func (p *Xtruct) SetI64Thing(val int64) {
	p.I64Thing = val
}

var fieldIDToName_Xtruct = map[int16]string{
	1:  "string_thing",
	4:  "byte_thing",
	9:  "i32_thing",
	11: "i64_thing",
}

func (p *Xtruct) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Xtruct[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Xtruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.StringThing = v
	}
	return nil
}

func (p *Xtruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.ByteThing = v
	}
	return nil
}

func (p *Xtruct) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.I32Thing = v
	}
	return nil
}

func (p *Xtruct) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.I64Thing = v
	}
	return nil
}

func (p *Xtruct) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Xtruct"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Xtruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("string_thing", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.StringThing); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Xtruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("byte_thing", thrift.BYTE, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.ByteThing); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Xtruct) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("i32_thing", thrift.I32, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.I32Thing); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *Xtruct) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("i64_thing", thrift.I64, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.I64Thing); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *Xtruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Xtruct(%+v)", *p)
}

func (p *Xtruct) DeepEqual(ano *Xtruct) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.StringThing) {
		return false
	}
	if !p.Field4DeepEqual(ano.ByteThing) {
		return false
	}
	if !p.Field9DeepEqual(ano.I32Thing) {
		return false
	}
	if !p.Field11DeepEqual(ano.I64Thing) {
		return false
	}
	return true
}

func (p *Xtruct) Field1DeepEqual(src string) bool {

	if strings.Compare(p.StringThing, src) != 0 {
		return false
	}
	return true
}
func (p *Xtruct) Field4DeepEqual(src int8) bool {

	if p.ByteThing != src {
		return false
	}
	return true
}
func (p *Xtruct) Field9DeepEqual(src int32) bool {

	if p.I32Thing != src {
		return false
	}
	return true
}
func (p *Xtruct) Field11DeepEqual(src int64) bool {

	if p.I64Thing != src {
		return false
	}
	return true
}

type Xtruct2 struct {
	ByteThing   int8    `thrift:"byte_thing,1" json:"byte_thing"`
	StructThing *Xtruct `thrift:"struct_thing,2" json:"struct_thing"`
	I32Thing    int32   `thrift:"i32_thing,3" json:"i32_thing"`
}

func NewXtruct2() *Xtruct2 {
	return &Xtruct2{}
}

func (p *Xtruct2) GetByteThing() int8 {
	return p.ByteThing
}

var Xtruct2_StructThing_DEFAULT *Xtruct

func (p *Xtruct2) GetStructThing() *Xtruct {
	if !p.IsSetStructThing() {
		return Xtruct2_StructThing_DEFAULT
	}
	return p.StructThing
}

func (p *Xtruct2) GetI32Thing() int32 {
	return p.I32Thing
}
func (p *Xtruct2) SetByteThing(val int8) {
	p.ByteThing = val
}
func (p *Xtruct2) SetStructThing(val *Xtruct) {
	p.StructThing = val
}
func (p *Xtruct2) SetI32Thing(val int32) {
	p.I32Thing = val
}

var fieldIDToName_Xtruct2 = map[int16]string{
	1: "byte_thing",
	2: "struct_thing",
	3: "i32_thing",
}

func (p *Xtruct2) IsSetStructThing() bool {
	return p.StructThing != nil
}

func (p *Xtruct2) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Xtruct2[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Xtruct2) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.ByteThing = v
	}
	return nil
}

func (p *Xtruct2) ReadField2(iprot thrift.TProtocol) error {
	p.StructThing = NewXtruct()
	if err := p.StructThing.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *Xtruct2) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.I32Thing = v
	}
	return nil
}

func (p *Xtruct2) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Xtruct2"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Xtruct2) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("byte_thing", thrift.BYTE, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.ByteThing); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Xtruct2) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("struct_thing", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.StructThing.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Xtruct2) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("i32_thing", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.I32Thing); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Xtruct2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Xtruct2(%+v)", *p)
}

func (p *Xtruct2) DeepEqual(ano *Xtruct2) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ByteThing) {
		return false
	}
	if !p.Field2DeepEqual(ano.StructThing) {
		return false
	}
	if !p.Field3DeepEqual(ano.I32Thing) {
		return false
	}
	return true
}

func (p *Xtruct2) Field1DeepEqual(src int8) bool {

	if p.ByteThing != src {
		return false
	}
	return true
}
func (p *Xtruct2) Field2DeepEqual(src *Xtruct) bool {

	if !p.StructThing.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Xtruct2) Field3DeepEqual(src int32) bool {

	if p.I32Thing != src {
		return false
	}
	return true
}

type Xtruct3 struct {
	StringThing string `thrift:"string_thing,1" json:"string_thing"`
	Changed     int32  `thrift:"changed,4" json:"changed"`
	I32Thing    int32  `thrift:"i32_thing,9" json:"i32_thing"`
	I64Thing    int64  `thrift:"i64_thing,11" json:"i64_thing"`
}

func NewXtruct3() *Xtruct3 {
	return &Xtruct3{}
}

func (p *Xtruct3) GetStringThing() string {
	return p.StringThing
}

func (p *Xtruct3) GetChanged() int32 {
	return p.Changed
}

func (p *Xtruct3) GetI32Thing() int32 {
	return p.I32Thing
}

func (p *Xtruct3) GetI64Thing() int64 {
	return p.I64Thing
}
func (p *Xtruct3) SetStringThing(val string) {
	p.StringThing = val
}
func (p *Xtruct3) SetChanged(val int32) {
	p.Changed = val
}
func (p *Xtruct3) SetI32Thing(val int32) {
	p.I32Thing = val
}
func (p *Xtruct3) SetI64Thing(val int64) {
	p.I64Thing = val
}

var fieldIDToName_Xtruct3 = map[int16]string{
	1:  "string_thing",
	4:  "changed",
	9:  "i32_thing",
	11: "i64_thing",
}

func (p *Xtruct3) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Xtruct3[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Xtruct3) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.StringThing = v
	}
	return nil
}

func (p *Xtruct3) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Changed = v
	}
	return nil
}

func (p *Xtruct3) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.I32Thing = v
	}
	return nil
}

func (p *Xtruct3) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.I64Thing = v
	}
	return nil
}

func (p *Xtruct3) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Xtruct3"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Xtruct3) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("string_thing", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.StringThing); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Xtruct3) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("changed", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Changed); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Xtruct3) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("i32_thing", thrift.I32, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.I32Thing); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *Xtruct3) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("i64_thing", thrift.I64, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.I64Thing); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *Xtruct3) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Xtruct3(%+v)", *p)
}

func (p *Xtruct3) DeepEqual(ano *Xtruct3) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.StringThing) {
		return false
	}
	if !p.Field4DeepEqual(ano.Changed) {
		return false
	}
	if !p.Field9DeepEqual(ano.I32Thing) {
		return false
	}
	if !p.Field11DeepEqual(ano.I64Thing) {
		return false
	}
	return true
}

func (p *Xtruct3) Field1DeepEqual(src string) bool {

	if strings.Compare(p.StringThing, src) != 0 {
		return false
	}
	return true
}
func (p *Xtruct3) Field4DeepEqual(src int32) bool {

	if p.Changed != src {
		return false
	}
	return true
}
func (p *Xtruct3) Field9DeepEqual(src int32) bool {

	if p.I32Thing != src {
		return false
	}
	return true
}
func (p *Xtruct3) Field11DeepEqual(src int64) bool {

	if p.I64Thing != src {
		return false
	}
	return true
}

type Insanity struct {
	UserMap map[Numberz]UserId `thrift:"userMap,1" json:"userMap"`
	Xtructs []*Xtruct          `thrift:"xtructs,2" json:"xtructs"`
}

func NewInsanity() *Insanity {
	return &Insanity{}
}

func (p *Insanity) GetUserMap() map[Numberz]UserId {
	return p.UserMap
}

func (p *Insanity) GetXtructs() []*Xtruct {
	return p.Xtructs
}
func (p *Insanity) SetUserMap(val map[Numberz]UserId) {
	p.UserMap = val
}
func (p *Insanity) SetXtructs(val []*Xtruct) {
	p.Xtructs = val
}

var fieldIDToName_Insanity = map[int16]string{
	1: "userMap",
	2: "xtructs",
}

func (p *Insanity) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Insanity[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Insanity) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.UserMap = make(map[Numberz]UserId, size)
	for i := 0; i < size; i++ {
		var _key Numberz
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = Numberz(v)
		}

		var _val UserId
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_val = v
		}

		p.UserMap[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *Insanity) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Xtructs = make([]*Xtruct, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewXtruct()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Xtructs = append(p.Xtructs, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *Insanity) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Insanity"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Insanity) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("userMap", thrift.MAP, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.I64, len(p.UserMap)); err != nil {
		return err
	}
	for k, v := range p.UserMap {

		if err := oprot.WriteI32(int32(k)); err != nil {
			return err
		}

		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Insanity) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("xtructs", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Xtructs)); err != nil {
		return err
	}
	for _, v := range p.Xtructs {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Insanity) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Insanity(%+v)", *p)
}

func (p *Insanity) DeepEqual(ano *Insanity) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserMap) {
		return false
	}
	if !p.Field2DeepEqual(ano.Xtructs) {
		return false
	}
	return true
}

func (p *Insanity) Field1DeepEqual(src map[Numberz]UserId) bool {

	if len(p.UserMap) != len(src) {
		return false
	}
	for k, v := range p.UserMap {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *Insanity) Field2DeepEqual(src []*Xtruct) bool {

	if len(p.Xtructs) != len(src) {
		return false
	}
	for i, v := range p.Xtructs {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type CrazyNesting struct {
	StringField string      `thrift:"string_field,1" json:"string_field"`
	SetField    []*Insanity `thrift:"set_field,2" json:"set_field,omitempty"`
	BinaryField []byte      `thrift:"binary_field,4" json:"binary_field"`
}

func NewCrazyNesting() *CrazyNesting {
	return &CrazyNesting{}
}

func (p *CrazyNesting) GetStringField() string {
	return p.StringField
}

var CrazyNesting_SetField_DEFAULT []*Insanity

func (p *CrazyNesting) GetSetField() []*Insanity {
	if !p.IsSetSetField() {
		return CrazyNesting_SetField_DEFAULT
	}
	return p.SetField
}

func (p *CrazyNesting) GetBinaryField() []byte {
	return p.BinaryField
}
func (p *CrazyNesting) SetStringField(val string) {
	p.StringField = val
}
func (p *CrazyNesting) SetSetField(val []*Insanity) {
	p.SetField = val
}
func (p *CrazyNesting) SetBinaryField(val []byte) {
	p.BinaryField = val
}

var fieldIDToName_CrazyNesting = map[int16]string{
	1: "string_field",
	2: "set_field",
	4: "binary_field",
}

func (p *CrazyNesting) IsSetSetField() bool {
	return p.SetField != nil
}

func (p *CrazyNesting) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.SET {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CrazyNesting[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CrazyNesting) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.StringField = v
	}
	return nil
}

func (p *CrazyNesting) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return err
	}
	p.SetField = make([]*Insanity, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewInsanity()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.SetField = append(p.SetField, _elem)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CrazyNesting) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		p.BinaryField = []byte(v)
	}
	return nil
}

func (p *CrazyNesting) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CrazyNesting"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CrazyNesting) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("string_field", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.StringField); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CrazyNesting) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSetField() {
		if err = oprot.WriteFieldBegin("set_field", thrift.SET, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteSetBegin(thrift.STRUCT, len(p.SetField)); err != nil {
			return err
		}
		for i := 0; i < len(p.SetField); i++ {
			for j := i + 1; j < len(p.SetField); j++ {
				if func(tgt, src *Insanity) bool {
					if !tgt.DeepEqual(src) {
						return false
					}
					return true
				}(p.SetField[i], p.SetField[j]) {
					return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.SetField[i]))
				}
			}
		}
		for _, v := range p.SetField {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CrazyNesting) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("binary_field", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.BinaryField)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CrazyNesting) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CrazyNesting(%+v)", *p)
}

func (p *CrazyNesting) DeepEqual(ano *CrazyNesting) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.StringField) {
		return false
	}
	if !p.Field2DeepEqual(ano.SetField) {
		return false
	}
	if !p.Field4DeepEqual(ano.BinaryField) {
		return false
	}
	return true
}

func (p *CrazyNesting) Field1DeepEqual(src string) bool {

	if strings.Compare(p.StringField, src) != 0 {
		return false
	}
	return true
}
func (p *CrazyNesting) Field2DeepEqual(src []*Insanity) bool {

	if len(p.SetField) != len(src) {
		return false
	}
	for i, v := range p.SetField {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CrazyNesting) Field4DeepEqual(src []byte) bool {

	if bytes.Compare(p.BinaryField, src) != 0 {
		return false
	}
	return true
}

type EmptyStruct struct {
}

func NewEmptyStruct() *EmptyStruct {
	return &EmptyStruct{}
}

var fieldIDToName_EmptyStruct = map[int16]string{}

func (p *EmptyStruct) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EmptyStruct) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("EmptyStruct"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EmptyStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmptyStruct(%+v)", *p)
}

func (p *EmptyStruct) DeepEqual(ano *EmptyStruct) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type OneField struct {
	Field *EmptyStruct `thrift:"field,1" json:"field"`
}

func NewOneField() *OneField {
	return &OneField{}
}

var OneField_Field_DEFAULT *EmptyStruct

func (p *OneField) GetField() *EmptyStruct {
	if !p.IsSetField() {
		return OneField_Field_DEFAULT
	}
	return p.Field
}
func (p *OneField) SetField(val *EmptyStruct) {
	p.Field = val
}

var fieldIDToName_OneField = map[int16]string{
	1: "field",
}

func (p *OneField) IsSetField() bool {
	return p.Field != nil
}

func (p *OneField) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_OneField[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *OneField) ReadField1(iprot thrift.TProtocol) error {
	p.Field = NewEmptyStruct()
	if err := p.Field.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *OneField) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("OneField"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *OneField) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("field", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Field.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *OneField) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OneField(%+v)", *p)
}

func (p *OneField) DeepEqual(ano *OneField) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Field) {
		return false
	}
	return true
}

func (p *OneField) Field1DeepEqual(src *EmptyStruct) bool {

	if !p.Field.DeepEqual(src) {
		return false
	}
	return true
}

type VersioningTestV1 struct {
	BeginInBoth int32  `thrift:"begin_in_both,1" json:"begin_in_both"`
	OldString   string `thrift:"old_string,3" json:"old_string"`
	EndInBoth   int32  `thrift:"end_in_both,12" json:"end_in_both"`
}

func NewVersioningTestV1() *VersioningTestV1 {
	return &VersioningTestV1{}
}

func (p *VersioningTestV1) GetBeginInBoth() int32 {
	return p.BeginInBoth
}

func (p *VersioningTestV1) GetOldString() string {
	return p.OldString
}

func (p *VersioningTestV1) GetEndInBoth() int32 {
	return p.EndInBoth
}
func (p *VersioningTestV1) SetBeginInBoth(val int32) {
	p.BeginInBoth = val
}
func (p *VersioningTestV1) SetOldString(val string) {
	p.OldString = val
}
func (p *VersioningTestV1) SetEndInBoth(val int32) {
	p.EndInBoth = val
}

var fieldIDToName_VersioningTestV1 = map[int16]string{
	1:  "begin_in_both",
	3:  "old_string",
	12: "end_in_both",
}

func (p *VersioningTestV1) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VersioningTestV1[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VersioningTestV1) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.BeginInBoth = v
	}
	return nil
}

func (p *VersioningTestV1) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.OldString = v
	}
	return nil
}

func (p *VersioningTestV1) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.EndInBoth = v
	}
	return nil
}

func (p *VersioningTestV1) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VersioningTestV1"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VersioningTestV1) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("begin_in_both", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.BeginInBoth); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VersioningTestV1) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("old_string", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OldString); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *VersioningTestV1) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("end_in_both", thrift.I32, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.EndInBoth); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *VersioningTestV1) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersioningTestV1(%+v)", *p)
}

func (p *VersioningTestV1) DeepEqual(ano *VersioningTestV1) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BeginInBoth) {
		return false
	}
	if !p.Field3DeepEqual(ano.OldString) {
		return false
	}
	if !p.Field12DeepEqual(ano.EndInBoth) {
		return false
	}
	return true
}

func (p *VersioningTestV1) Field1DeepEqual(src int32) bool {

	if p.BeginInBoth != src {
		return false
	}
	return true
}
func (p *VersioningTestV1) Field3DeepEqual(src string) bool {

	if strings.Compare(p.OldString, src) != 0 {
		return false
	}
	return true
}
func (p *VersioningTestV1) Field12DeepEqual(src int32) bool {

	if p.EndInBoth != src {
		return false
	}
	return true
}

type VersioningTestV2 struct {
	BeginInBoth int32           `thrift:"begin_in_both,1" json:"begin_in_both"`
	Newint_     int32           `thrift:"newint,2" json:"newint"`
	Newbyte_    int8            `thrift:"newbyte,3" json:"newbyte"`
	Newshort_   int16           `thrift:"newshort,4" json:"newshort"`
	Newlong_    int64           `thrift:"newlong,5" json:"newlong"`
	Newdouble_  float64         `thrift:"newdouble,6" json:"newdouble"`
	Newstruct_  *Bonk           `thrift:"newstruct,7" json:"newstruct"`
	Newlist_    []int32         `thrift:"newlist,8" json:"newlist"`
	Newset_     []int32         `thrift:"newset,9" json:"newset"`
	Newmap_     map[int32]int32 `thrift:"newmap,10" json:"newmap"`
	Newstring_  string          `thrift:"newstring,11" json:"newstring"`
	EndInBoth   int32           `thrift:"end_in_both,12" json:"end_in_both"`
}

func NewVersioningTestV2() *VersioningTestV2 {
	return &VersioningTestV2{}
}

func (p *VersioningTestV2) GetBeginInBoth() int32 {
	return p.BeginInBoth
}

func (p *VersioningTestV2) GetNewint_() int32 {
	return p.Newint_
}

func (p *VersioningTestV2) GetNewbyte_() int8 {
	return p.Newbyte_
}

func (p *VersioningTestV2) GetNewshort_() int16 {
	return p.Newshort_
}

func (p *VersioningTestV2) GetNewlong_() int64 {
	return p.Newlong_
}

func (p *VersioningTestV2) GetNewdouble_() float64 {
	return p.Newdouble_
}

var VersioningTestV2_Newstruct__DEFAULT *Bonk

func (p *VersioningTestV2) GetNewstruct_() *Bonk {
	if !p.IsSetNewstruct_() {
		return VersioningTestV2_Newstruct__DEFAULT
	}
	return p.Newstruct_
}

func (p *VersioningTestV2) GetNewlist_() []int32 {
	return p.Newlist_
}

func (p *VersioningTestV2) GetNewset_() []int32 {
	return p.Newset_
}

func (p *VersioningTestV2) GetNewmap_() map[int32]int32 {
	return p.Newmap_
}

func (p *VersioningTestV2) GetNewstring_() string {
	return p.Newstring_
}

func (p *VersioningTestV2) GetEndInBoth() int32 {
	return p.EndInBoth
}
func (p *VersioningTestV2) SetBeginInBoth(val int32) {
	p.BeginInBoth = val
}
func (p *VersioningTestV2) SetNewint_(val int32) {
	p.Newint_ = val
}
func (p *VersioningTestV2) SetNewbyte_(val int8) {
	p.Newbyte_ = val
}
func (p *VersioningTestV2) SetNewshort_(val int16) {
	p.Newshort_ = val
}
func (p *VersioningTestV2) SetNewlong_(val int64) {
	p.Newlong_ = val
}
func (p *VersioningTestV2) SetNewdouble_(val float64) {
	p.Newdouble_ = val
}
func (p *VersioningTestV2) SetNewstruct_(val *Bonk) {
	p.Newstruct_ = val
}
func (p *VersioningTestV2) SetNewlist_(val []int32) {
	p.Newlist_ = val
}
func (p *VersioningTestV2) SetNewset_(val []int32) {
	p.Newset_ = val
}
func (p *VersioningTestV2) SetNewmap_(val map[int32]int32) {
	p.Newmap_ = val
}
func (p *VersioningTestV2) SetNewstring_(val string) {
	p.Newstring_ = val
}
func (p *VersioningTestV2) SetEndInBoth(val int32) {
	p.EndInBoth = val
}

var fieldIDToName_VersioningTestV2 = map[int16]string{
	1:  "begin_in_both",
	2:  "newint",
	3:  "newbyte",
	4:  "newshort",
	5:  "newlong",
	6:  "newdouble",
	7:  "newstruct",
	8:  "newlist",
	9:  "newset",
	10: "newmap",
	11: "newstring",
	12: "end_in_both",
}

func (p *VersioningTestV2) IsSetNewstruct_() bool {
	return p.Newstruct_ != nil
}

func (p *VersioningTestV2) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.SET {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VersioningTestV2[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VersioningTestV2) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.BeginInBoth = v
	}
	return nil
}

func (p *VersioningTestV2) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Newint_ = v
	}
	return nil
}

func (p *VersioningTestV2) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.Newbyte_ = v
	}
	return nil
}

func (p *VersioningTestV2) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		p.Newshort_ = v
	}
	return nil
}

func (p *VersioningTestV2) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Newlong_ = v
	}
	return nil
}

func (p *VersioningTestV2) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.Newdouble_ = v
	}
	return nil
}

func (p *VersioningTestV2) ReadField7(iprot thrift.TProtocol) error {
	p.Newstruct_ = NewBonk()
	if err := p.Newstruct_.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VersioningTestV2) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Newlist_ = make([]int32, 0, size)
	for i := 0; i < size; i++ {
		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Newlist_ = append(p.Newlist_, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *VersioningTestV2) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return err
	}
	p.Newset_ = make([]int32, 0, size)
	for i := 0; i < size; i++ {
		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Newset_ = append(p.Newset_, _elem)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return err
	}
	return nil
}

func (p *VersioningTestV2) ReadField10(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Newmap_ = make(map[int32]int32, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_val = v
		}

		p.Newmap_[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *VersioningTestV2) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Newstring_ = v
	}
	return nil
}

func (p *VersioningTestV2) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.EndInBoth = v
	}
	return nil
}

func (p *VersioningTestV2) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VersioningTestV2"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VersioningTestV2) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("begin_in_both", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.BeginInBoth); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VersioningTestV2) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("newint", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Newint_); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *VersioningTestV2) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("newbyte", thrift.BYTE, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Newbyte_); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *VersioningTestV2) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("newshort", thrift.I16, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI16(p.Newshort_); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *VersioningTestV2) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("newlong", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Newlong_); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *VersioningTestV2) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("newdouble", thrift.DOUBLE, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.Newdouble_); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *VersioningTestV2) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("newstruct", thrift.STRUCT, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Newstruct_.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *VersioningTestV2) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("newlist", thrift.LIST, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.Newlist_)); err != nil {
		return err
	}
	for _, v := range p.Newlist_ {
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *VersioningTestV2) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("newset", thrift.SET, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteSetBegin(thrift.I32, len(p.Newset_)); err != nil {
		return err
	}
	for i := 0; i < len(p.Newset_); i++ {
		for j := i + 1; j < len(p.Newset_); j++ {
			if func(tgt, src int32) bool {
				if tgt != src {
					return false
				}
				return true
			}(p.Newset_[i], p.Newset_[j]) {
				return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Newset_[i]))
			}
		}
	}
	for _, v := range p.Newset_ {
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *VersioningTestV2) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("newmap", thrift.MAP, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.I32, len(p.Newmap_)); err != nil {
		return err
	}
	for k, v := range p.Newmap_ {

		if err := oprot.WriteI32(k); err != nil {
			return err
		}

		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *VersioningTestV2) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("newstring", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Newstring_); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *VersioningTestV2) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("end_in_both", thrift.I32, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.EndInBoth); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *VersioningTestV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersioningTestV2(%+v)", *p)
}

func (p *VersioningTestV2) DeepEqual(ano *VersioningTestV2) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BeginInBoth) {
		return false
	}
	if !p.Field2DeepEqual(ano.Newint_) {
		return false
	}
	if !p.Field3DeepEqual(ano.Newbyte_) {
		return false
	}
	if !p.Field4DeepEqual(ano.Newshort_) {
		return false
	}
	if !p.Field5DeepEqual(ano.Newlong_) {
		return false
	}
	if !p.Field6DeepEqual(ano.Newdouble_) {
		return false
	}
	if !p.Field7DeepEqual(ano.Newstruct_) {
		return false
	}
	if !p.Field8DeepEqual(ano.Newlist_) {
		return false
	}
	if !p.Field9DeepEqual(ano.Newset_) {
		return false
	}
	if !p.Field10DeepEqual(ano.Newmap_) {
		return false
	}
	if !p.Field11DeepEqual(ano.Newstring_) {
		return false
	}
	if !p.Field12DeepEqual(ano.EndInBoth) {
		return false
	}
	return true
}

func (p *VersioningTestV2) Field1DeepEqual(src int32) bool {

	if p.BeginInBoth != src {
		return false
	}
	return true
}
func (p *VersioningTestV2) Field2DeepEqual(src int32) bool {

	if p.Newint_ != src {
		return false
	}
	return true
}
func (p *VersioningTestV2) Field3DeepEqual(src int8) bool {

	if p.Newbyte_ != src {
		return false
	}
	return true
}
func (p *VersioningTestV2) Field4DeepEqual(src int16) bool {

	if p.Newshort_ != src {
		return false
	}
	return true
}
func (p *VersioningTestV2) Field5DeepEqual(src int64) bool {

	if p.Newlong_ != src {
		return false
	}
	return true
}
func (p *VersioningTestV2) Field6DeepEqual(src float64) bool {

	if p.Newdouble_ != src {
		return false
	}
	return true
}
func (p *VersioningTestV2) Field7DeepEqual(src *Bonk) bool {

	if !p.Newstruct_.DeepEqual(src) {
		return false
	}
	return true
}
func (p *VersioningTestV2) Field8DeepEqual(src []int32) bool {

	if len(p.Newlist_) != len(src) {
		return false
	}
	for i, v := range p.Newlist_ {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *VersioningTestV2) Field9DeepEqual(src []int32) bool {

	if len(p.Newset_) != len(src) {
		return false
	}
	for i, v := range p.Newset_ {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *VersioningTestV2) Field10DeepEqual(src map[int32]int32) bool {

	if len(p.Newmap_) != len(src) {
		return false
	}
	for k, v := range p.Newmap_ {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *VersioningTestV2) Field11DeepEqual(src string) bool {

	if strings.Compare(p.Newstring_, src) != 0 {
		return false
	}
	return true
}
func (p *VersioningTestV2) Field12DeepEqual(src int32) bool {

	if p.EndInBoth != src {
		return false
	}
	return true
}

type ListTypeVersioningV1 struct {
	Myints []int32 `thrift:"myints,1" json:"myints"`
	Hello  string  `thrift:"hello,2" json:"hello"`
}

func NewListTypeVersioningV1() *ListTypeVersioningV1 {
	return &ListTypeVersioningV1{}
}

func (p *ListTypeVersioningV1) GetMyints() []int32 {
	return p.Myints
}

func (p *ListTypeVersioningV1) GetHello() string {
	return p.Hello
}
func (p *ListTypeVersioningV1) SetMyints(val []int32) {
	p.Myints = val
}
func (p *ListTypeVersioningV1) SetHello(val string) {
	p.Hello = val
}

var fieldIDToName_ListTypeVersioningV1 = map[int16]string{
	1: "myints",
	2: "hello",
}

func (p *ListTypeVersioningV1) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListTypeVersioningV1[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListTypeVersioningV1) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Myints = make([]int32, 0, size)
	for i := 0; i < size; i++ {
		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Myints = append(p.Myints, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListTypeVersioningV1) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Hello = v
	}
	return nil
}

func (p *ListTypeVersioningV1) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListTypeVersioningV1"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListTypeVersioningV1) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("myints", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.Myints)); err != nil {
		return err
	}
	for _, v := range p.Myints {
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListTypeVersioningV1) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("hello", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Hello); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListTypeVersioningV1) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListTypeVersioningV1(%+v)", *p)
}

func (p *ListTypeVersioningV1) DeepEqual(ano *ListTypeVersioningV1) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Myints) {
		return false
	}
	if !p.Field2DeepEqual(ano.Hello) {
		return false
	}
	return true
}

func (p *ListTypeVersioningV1) Field1DeepEqual(src []int32) bool {

	if len(p.Myints) != len(src) {
		return false
	}
	for i, v := range p.Myints {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *ListTypeVersioningV1) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Hello, src) != 0 {
		return false
	}
	return true
}

type ListTypeVersioningV2 struct {
	Strings []string `thrift:"strings,1" json:"strings"`
	Hello   string   `thrift:"hello,2" json:"hello"`
}

func NewListTypeVersioningV2() *ListTypeVersioningV2 {
	return &ListTypeVersioningV2{}
}

func (p *ListTypeVersioningV2) GetStrings() []string {
	return p.Strings
}

func (p *ListTypeVersioningV2) GetHello() string {
	return p.Hello
}
func (p *ListTypeVersioningV2) SetStrings(val []string) {
	p.Strings = val
}
func (p *ListTypeVersioningV2) SetHello(val string) {
	p.Hello = val
}

var fieldIDToName_ListTypeVersioningV2 = map[int16]string{
	1: "strings",
	2: "hello",
}

func (p *ListTypeVersioningV2) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListTypeVersioningV2[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListTypeVersioningV2) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Strings = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Strings = append(p.Strings, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListTypeVersioningV2) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Hello = v
	}
	return nil
}

func (p *ListTypeVersioningV2) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListTypeVersioningV2"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListTypeVersioningV2) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("strings", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Strings)); err != nil {
		return err
	}
	for _, v := range p.Strings {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListTypeVersioningV2) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("hello", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Hello); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListTypeVersioningV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListTypeVersioningV2(%+v)", *p)
}

func (p *ListTypeVersioningV2) DeepEqual(ano *ListTypeVersioningV2) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Strings) {
		return false
	}
	if !p.Field2DeepEqual(ano.Hello) {
		return false
	}
	return true
}

func (p *ListTypeVersioningV2) Field1DeepEqual(src []string) bool {

	if len(p.Strings) != len(src) {
		return false
	}
	for i, v := range p.Strings {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ListTypeVersioningV2) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Hello, src) != 0 {
		return false
	}
	return true
}

type GuessProtocolStruct struct {
	MapField map[string]string `thrift:"map_field,7" json:"map_field"`
}

func NewGuessProtocolStruct() *GuessProtocolStruct {
	return &GuessProtocolStruct{}
}

func (p *GuessProtocolStruct) GetMapField() map[string]string {
	return p.MapField
}
func (p *GuessProtocolStruct) SetMapField(val map[string]string) {
	p.MapField = val
}

var fieldIDToName_GuessProtocolStruct = map[int16]string{
	7: "map_field",
}

func (p *GuessProtocolStruct) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 7:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GuessProtocolStruct[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GuessProtocolStruct) ReadField7(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.MapField = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		p.MapField[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GuessProtocolStruct) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GuessProtocolStruct"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GuessProtocolStruct) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("map_field", thrift.MAP, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.MapField)); err != nil {
		return err
	}
	for k, v := range p.MapField {

		if err := oprot.WriteString(k); err != nil {
			return err
		}

		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *GuessProtocolStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GuessProtocolStruct(%+v)", *p)
}

func (p *GuessProtocolStruct) DeepEqual(ano *GuessProtocolStruct) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field7DeepEqual(ano.MapField) {
		return false
	}
	return true
}

func (p *GuessProtocolStruct) Field7DeepEqual(src map[string]string) bool {

	if len(p.MapField) != len(src) {
		return false
	}
	for k, v := range p.MapField {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type LargeDeltas struct {
	B1         *Bools            `thrift:"b1,1" json:"b1"`
	B10        *Bools            `thrift:"b10,10" json:"b10"`
	B100       *Bools            `thrift:"b100,100" json:"b100"`
	CheckTrue  bool              `thrift:"check_true,500" json:"check_true"`
	B1000      *Bools            `thrift:"b1000,1000" json:"b1000"`
	CheckFalse bool              `thrift:"check_false,1500" json:"check_false"`
	Vertwo2000 *VersioningTestV2 `thrift:"vertwo2000,2000" json:"vertwo2000"`
	ASet2500   []string          `thrift:"a_set2500,2500" json:"a_set2500"`
	Vertwo3000 *VersioningTestV2 `thrift:"vertwo3000,3000" json:"vertwo3000"`
	BigNumbers []int32           `thrift:"big_numbers,4000" json:"big_numbers"`
}

func NewLargeDeltas() *LargeDeltas {
	return &LargeDeltas{}
}

var LargeDeltas_B1_DEFAULT *Bools

func (p *LargeDeltas) GetB1() *Bools {
	if !p.IsSetB1() {
		return LargeDeltas_B1_DEFAULT
	}
	return p.B1
}

var LargeDeltas_B10_DEFAULT *Bools

func (p *LargeDeltas) GetB10() *Bools {
	if !p.IsSetB10() {
		return LargeDeltas_B10_DEFAULT
	}
	return p.B10
}

var LargeDeltas_B100_DEFAULT *Bools

func (p *LargeDeltas) GetB100() *Bools {
	if !p.IsSetB100() {
		return LargeDeltas_B100_DEFAULT
	}
	return p.B100
}

func (p *LargeDeltas) GetCheckTrue() bool {
	return p.CheckTrue
}

var LargeDeltas_B1000_DEFAULT *Bools

func (p *LargeDeltas) GetB1000() *Bools {
	if !p.IsSetB1000() {
		return LargeDeltas_B1000_DEFAULT
	}
	return p.B1000
}

func (p *LargeDeltas) GetCheckFalse() bool {
	return p.CheckFalse
}

var LargeDeltas_Vertwo2000_DEFAULT *VersioningTestV2

func (p *LargeDeltas) GetVertwo2000() *VersioningTestV2 {
	if !p.IsSetVertwo2000() {
		return LargeDeltas_Vertwo2000_DEFAULT
	}
	return p.Vertwo2000
}

func (p *LargeDeltas) GetASet2500() []string {
	return p.ASet2500
}

var LargeDeltas_Vertwo3000_DEFAULT *VersioningTestV2

func (p *LargeDeltas) GetVertwo3000() *VersioningTestV2 {
	if !p.IsSetVertwo3000() {
		return LargeDeltas_Vertwo3000_DEFAULT
	}
	return p.Vertwo3000
}

func (p *LargeDeltas) GetBigNumbers() []int32 {
	return p.BigNumbers
}
func (p *LargeDeltas) SetB1(val *Bools) {
	p.B1 = val
}
func (p *LargeDeltas) SetB10(val *Bools) {
	p.B10 = val
}
func (p *LargeDeltas) SetB100(val *Bools) {
	p.B100 = val
}
func (p *LargeDeltas) SetCheckTrue(val bool) {
	p.CheckTrue = val
}
func (p *LargeDeltas) SetB1000(val *Bools) {
	p.B1000 = val
}
func (p *LargeDeltas) SetCheckFalse(val bool) {
	p.CheckFalse = val
}
func (p *LargeDeltas) SetVertwo2000(val *VersioningTestV2) {
	p.Vertwo2000 = val
}
func (p *LargeDeltas) SetASet2500(val []string) {
	p.ASet2500 = val
}
func (p *LargeDeltas) SetVertwo3000(val *VersioningTestV2) {
	p.Vertwo3000 = val
}
func (p *LargeDeltas) SetBigNumbers(val []int32) {
	p.BigNumbers = val
}

var fieldIDToName_LargeDeltas = map[int16]string{
	1:    "b1",
	10:   "b10",
	100:  "b100",
	500:  "check_true",
	1000: "b1000",
	1500: "check_false",
	2000: "vertwo2000",
	2500: "a_set2500",
	3000: "vertwo3000",
	4000: "big_numbers",
}

func (p *LargeDeltas) IsSetB1() bool {
	return p.B1 != nil
}

func (p *LargeDeltas) IsSetB10() bool {
	return p.B10 != nil
}

func (p *LargeDeltas) IsSetB100() bool {
	return p.B100 != nil
}

func (p *LargeDeltas) IsSetB1000() bool {
	return p.B1000 != nil
}

func (p *LargeDeltas) IsSetVertwo2000() bool {
	return p.Vertwo2000 != nil
}

func (p *LargeDeltas) IsSetVertwo3000() bool {
	return p.Vertwo3000 != nil
}

func (p *LargeDeltas) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 100:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 500:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField500(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1000:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1000(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1500:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1500(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2000:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2000(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2500:
			if fieldTypeId == thrift.SET {
				if err = p.ReadField2500(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3000:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3000(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4000:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4000(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LargeDeltas[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LargeDeltas) ReadField1(iprot thrift.TProtocol) error {
	p.B1 = NewBools()
	if err := p.B1.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LargeDeltas) ReadField10(iprot thrift.TProtocol) error {
	p.B10 = NewBools()
	if err := p.B10.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LargeDeltas) ReadField100(iprot thrift.TProtocol) error {
	p.B100 = NewBools()
	if err := p.B100.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LargeDeltas) ReadField500(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.CheckTrue = v
	}
	return nil
}

func (p *LargeDeltas) ReadField1000(iprot thrift.TProtocol) error {
	p.B1000 = NewBools()
	if err := p.B1000.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LargeDeltas) ReadField1500(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.CheckFalse = v
	}
	return nil
}

func (p *LargeDeltas) ReadField2000(iprot thrift.TProtocol) error {
	p.Vertwo2000 = NewVersioningTestV2()
	if err := p.Vertwo2000.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LargeDeltas) ReadField2500(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return err
	}
	p.ASet2500 = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.ASet2500 = append(p.ASet2500, _elem)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return err
	}
	return nil
}

func (p *LargeDeltas) ReadField3000(iprot thrift.TProtocol) error {
	p.Vertwo3000 = NewVersioningTestV2()
	if err := p.Vertwo3000.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LargeDeltas) ReadField4000(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.BigNumbers = make([]int32, 0, size)
	for i := 0; i < size; i++ {
		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.BigNumbers = append(p.BigNumbers, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *LargeDeltas) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LargeDeltas"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField500(oprot); err != nil {
			fieldId = 500
			goto WriteFieldError
		}
		if err = p.writeField1000(oprot); err != nil {
			fieldId = 1000
			goto WriteFieldError
		}
		if err = p.writeField1500(oprot); err != nil {
			fieldId = 1500
			goto WriteFieldError
		}
		if err = p.writeField2000(oprot); err != nil {
			fieldId = 2000
			goto WriteFieldError
		}
		if err = p.writeField2500(oprot); err != nil {
			fieldId = 2500
			goto WriteFieldError
		}
		if err = p.writeField3000(oprot); err != nil {
			fieldId = 3000
			goto WriteFieldError
		}
		if err = p.writeField4000(oprot); err != nil {
			fieldId = 4000
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LargeDeltas) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("b1", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.B1.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LargeDeltas) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("b10", thrift.STRUCT, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.B10.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *LargeDeltas) writeField100(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("b100", thrift.STRUCT, 100); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.B100.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *LargeDeltas) writeField500(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("check_true", thrift.BOOL, 500); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.CheckTrue); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 500 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 500 end error: ", p), err)
}

func (p *LargeDeltas) writeField1000(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("b1000", thrift.STRUCT, 1000); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.B1000.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1000 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1000 end error: ", p), err)
}

func (p *LargeDeltas) writeField1500(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("check_false", thrift.BOOL, 1500); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.CheckFalse); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1500 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1500 end error: ", p), err)
}

func (p *LargeDeltas) writeField2000(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("vertwo2000", thrift.STRUCT, 2000); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Vertwo2000.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2000 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2000 end error: ", p), err)
}

func (p *LargeDeltas) writeField2500(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("a_set2500", thrift.SET, 2500); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.ASet2500)); err != nil {
		return err
	}
	for i := 0; i < len(p.ASet2500); i++ {
		for j := i + 1; j < len(p.ASet2500); j++ {
			if func(tgt, src string) bool {
				if strings.Compare(tgt, src) != 0 {
					return false
				}
				return true
			}(p.ASet2500[i], p.ASet2500[j]) {
				return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.ASet2500[i]))
			}
		}
	}
	for _, v := range p.ASet2500 {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2500 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2500 end error: ", p), err)
}

func (p *LargeDeltas) writeField3000(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("vertwo3000", thrift.STRUCT, 3000); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Vertwo3000.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3000 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3000 end error: ", p), err)
}

func (p *LargeDeltas) writeField4000(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("big_numbers", thrift.LIST, 4000); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.BigNumbers)); err != nil {
		return err
	}
	for _, v := range p.BigNumbers {
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4000 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4000 end error: ", p), err)
}

func (p *LargeDeltas) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LargeDeltas(%+v)", *p)
}

func (p *LargeDeltas) DeepEqual(ano *LargeDeltas) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.B1) {
		return false
	}
	if !p.Field10DeepEqual(ano.B10) {
		return false
	}
	if !p.Field100DeepEqual(ano.B100) {
		return false
	}
	if !p.Field500DeepEqual(ano.CheckTrue) {
		return false
	}
	if !p.Field1000DeepEqual(ano.B1000) {
		return false
	}
	if !p.Field1500DeepEqual(ano.CheckFalse) {
		return false
	}
	if !p.Field2000DeepEqual(ano.Vertwo2000) {
		return false
	}
	if !p.Field2500DeepEqual(ano.ASet2500) {
		return false
	}
	if !p.Field3000DeepEqual(ano.Vertwo3000) {
		return false
	}
	if !p.Field4000DeepEqual(ano.BigNumbers) {
		return false
	}
	return true
}

func (p *LargeDeltas) Field1DeepEqual(src *Bools) bool {

	if !p.B1.DeepEqual(src) {
		return false
	}
	return true
}
func (p *LargeDeltas) Field10DeepEqual(src *Bools) bool {

	if !p.B10.DeepEqual(src) {
		return false
	}
	return true
}
func (p *LargeDeltas) Field100DeepEqual(src *Bools) bool {

	if !p.B100.DeepEqual(src) {
		return false
	}
	return true
}
func (p *LargeDeltas) Field500DeepEqual(src bool) bool {

	if p.CheckTrue != src {
		return false
	}
	return true
}
func (p *LargeDeltas) Field1000DeepEqual(src *Bools) bool {

	if !p.B1000.DeepEqual(src) {
		return false
	}
	return true
}
func (p *LargeDeltas) Field1500DeepEqual(src bool) bool {

	if p.CheckFalse != src {
		return false
	}
	return true
}
func (p *LargeDeltas) Field2000DeepEqual(src *VersioningTestV2) bool {

	if !p.Vertwo2000.DeepEqual(src) {
		return false
	}
	return true
}
func (p *LargeDeltas) Field2500DeepEqual(src []string) bool {

	if len(p.ASet2500) != len(src) {
		return false
	}
	for i, v := range p.ASet2500 {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *LargeDeltas) Field3000DeepEqual(src *VersioningTestV2) bool {

	if !p.Vertwo3000.DeepEqual(src) {
		return false
	}
	return true
}
func (p *LargeDeltas) Field4000DeepEqual(src []int32) bool {

	if len(p.BigNumbers) != len(src) {
		return false
	}
	for i, v := range p.BigNumbers {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type NestedListsI32x2 struct {
	Integerlist [][]int32 `thrift:"integerlist,1" json:"integerlist"`
}

func NewNestedListsI32x2() *NestedListsI32x2 {
	return &NestedListsI32x2{}
}

func (p *NestedListsI32x2) GetIntegerlist() [][]int32 {
	return p.Integerlist
}
func (p *NestedListsI32x2) SetIntegerlist(val [][]int32) {
	p.Integerlist = val
}

var fieldIDToName_NestedListsI32x2 = map[int16]string{
	1: "integerlist",
}

func (p *NestedListsI32x2) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NestedListsI32x2[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *NestedListsI32x2) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Integerlist = make([][]int32, 0, size)
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_elem := make([]int32, 0, size)
		for i := 0; i < size; i++ {
			var _elem1 int32
			if v, err := iprot.ReadI32(); err != nil {
				return err
			} else {
				_elem1 = v
			}

			_elem = append(_elem, _elem1)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		p.Integerlist = append(p.Integerlist, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *NestedListsI32x2) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NestedListsI32x2"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NestedListsI32x2) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("integerlist", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.LIST, len(p.Integerlist)); err != nil {
		return err
	}
	for _, v := range p.Integerlist {
		if err := oprot.WriteListBegin(thrift.I32, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *NestedListsI32x2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NestedListsI32x2(%+v)", *p)
}

func (p *NestedListsI32x2) DeepEqual(ano *NestedListsI32x2) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Integerlist) {
		return false
	}
	return true
}

func (p *NestedListsI32x2) Field1DeepEqual(src [][]int32) bool {

	if len(p.Integerlist) != len(src) {
		return false
	}
	for i, v := range p.Integerlist {
		_src := src[i]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if v != _src1 {
				return false
			}
		}
	}
	return true
}

type NestedListsI32x3 struct {
	Integerlist [][][]int32 `thrift:"integerlist,1" json:"integerlist"`
}

func NewNestedListsI32x3() *NestedListsI32x3 {
	return &NestedListsI32x3{}
}

func (p *NestedListsI32x3) GetIntegerlist() [][][]int32 {
	return p.Integerlist
}
func (p *NestedListsI32x3) SetIntegerlist(val [][][]int32) {
	p.Integerlist = val
}

var fieldIDToName_NestedListsI32x3 = map[int16]string{
	1: "integerlist",
}

func (p *NestedListsI32x3) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NestedListsI32x3[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *NestedListsI32x3) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Integerlist = make([][][]int32, 0, size)
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_elem := make([][]int32, 0, size)
		for i := 0; i < size; i++ {
			_, size, err := iprot.ReadListBegin()
			if err != nil {
				return err
			}
			_elem1 := make([]int32, 0, size)
			for i := 0; i < size; i++ {
				var _elem2 int32
				if v, err := iprot.ReadI32(); err != nil {
					return err
				} else {
					_elem2 = v
				}

				_elem1 = append(_elem1, _elem2)
			}
			if err := iprot.ReadListEnd(); err != nil {
				return err
			}

			_elem = append(_elem, _elem1)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		p.Integerlist = append(p.Integerlist, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *NestedListsI32x3) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NestedListsI32x3"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NestedListsI32x3) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("integerlist", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.LIST, len(p.Integerlist)); err != nil {
		return err
	}
	for _, v := range p.Integerlist {
		if err := oprot.WriteListBegin(thrift.LIST, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := oprot.WriteListBegin(thrift.I32, len(v)); err != nil {
				return err
			}
			for _, v := range v {
				if err := oprot.WriteI32(v); err != nil {
					return err
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *NestedListsI32x3) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NestedListsI32x3(%+v)", *p)
}

func (p *NestedListsI32x3) DeepEqual(ano *NestedListsI32x3) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Integerlist) {
		return false
	}
	return true
}

func (p *NestedListsI32x3) Field1DeepEqual(src [][][]int32) bool {

	if len(p.Integerlist) != len(src) {
		return false
	}
	for i, v := range p.Integerlist {
		_src := src[i]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if len(v) != len(_src1) {
				return false
			}
			for i, v := range v {
				_src2 := _src1[i]
				if v != _src2 {
					return false
				}
			}
		}
	}
	return true
}

type NestedMixedx2 struct {
	IntSetList       [][]int32            `thrift:"int_set_list,1" json:"int_set_list"`
	MapIntStrset     map[int32][]string   `thrift:"map_int_strset,2" json:"map_int_strset"`
	MapIntStrsetList []map[int32][]string `thrift:"map_int_strset_list,3" json:"map_int_strset_list"`
}

func NewNestedMixedx2() *NestedMixedx2 {
	return &NestedMixedx2{}
}

func (p *NestedMixedx2) GetIntSetList() [][]int32 {
	return p.IntSetList
}

func (p *NestedMixedx2) GetMapIntStrset() map[int32][]string {
	return p.MapIntStrset
}

func (p *NestedMixedx2) GetMapIntStrsetList() []map[int32][]string {
	return p.MapIntStrsetList
}
func (p *NestedMixedx2) SetIntSetList(val [][]int32) {
	p.IntSetList = val
}
func (p *NestedMixedx2) SetMapIntStrset(val map[int32][]string) {
	p.MapIntStrset = val
}
func (p *NestedMixedx2) SetMapIntStrsetList(val []map[int32][]string) {
	p.MapIntStrsetList = val
}

var fieldIDToName_NestedMixedx2 = map[int16]string{
	1: "int_set_list",
	2: "map_int_strset",
	3: "map_int_strset_list",
}

func (p *NestedMixedx2) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NestedMixedx2[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *NestedMixedx2) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.IntSetList = make([][]int32, 0, size)
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadSetBegin()
		if err != nil {
			return err
		}
		_elem := make([]int32, 0, size)
		for i := 0; i < size; i++ {
			var _elem1 int32
			if v, err := iprot.ReadI32(); err != nil {
				return err
			} else {
				_elem1 = v
			}

			_elem = append(_elem, _elem1)
		}
		if err := iprot.ReadSetEnd(); err != nil {
			return err
		}

		p.IntSetList = append(p.IntSetList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *NestedMixedx2) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.MapIntStrset = make(map[int32][]string, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		_, size, err := iprot.ReadSetBegin()
		if err != nil {
			return err
		}
		_val := make([]string, 0, size)
		for i := 0; i < size; i++ {
			var _elem string
			if v, err := iprot.ReadString(); err != nil {
				return err
			} else {
				_elem = v
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadSetEnd(); err != nil {
			return err
		}

		p.MapIntStrset[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *NestedMixedx2) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.MapIntStrsetList = make([]map[int32][]string, 0, size)
	for i := 0; i < size; i++ {
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return err
		}
		_elem := make(map[int32][]string, size)
		for i := 0; i < size; i++ {
			var _key int32
			if v, err := iprot.ReadI32(); err != nil {
				return err
			} else {
				_key = v
			}

			_, size, err := iprot.ReadSetBegin()
			if err != nil {
				return err
			}
			_val := make([]string, 0, size)
			for i := 0; i < size; i++ {
				var _elem1 string
				if v, err := iprot.ReadString(); err != nil {
					return err
				} else {
					_elem1 = v
				}

				_val = append(_val, _elem1)
			}
			if err := iprot.ReadSetEnd(); err != nil {
				return err
			}

			_elem[_key] = _val
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return err
		}

		p.MapIntStrsetList = append(p.MapIntStrsetList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *NestedMixedx2) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NestedMixedx2"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NestedMixedx2) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("int_set_list", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.SET, len(p.IntSetList)); err != nil {
		return err
	}
	for _, v := range p.IntSetList {
		if err := oprot.WriteSetBegin(thrift.I32, len(v)); err != nil {
			return err
		}
		for i := 0; i < len(v); i++ {
			for j := i + 1; j < len(v); j++ {
				if func(tgt, src int32) bool {
					if tgt != src {
						return false
					}
					return true
				}(v[i], v[j]) {
					return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v[i]))
				}
			}
		}
		for _, v := range v {
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *NestedMixedx2) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("map_int_strset", thrift.MAP, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.SET, len(p.MapIntStrset)); err != nil {
		return err
	}
	for k, v := range p.MapIntStrset {

		if err := oprot.WriteI32(k); err != nil {
			return err
		}

		if err := oprot.WriteSetBegin(thrift.STRING, len(v)); err != nil {
			return err
		}
		for i := 0; i < len(v); i++ {
			for j := i + 1; j < len(v); j++ {
				if func(tgt, src string) bool {
					if strings.Compare(tgt, src) != 0 {
						return false
					}
					return true
				}(v[i], v[j]) {
					return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v[i]))
				}
			}
		}
		for _, v := range v {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *NestedMixedx2) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("map_int_strset_list", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.MAP, len(p.MapIntStrsetList)); err != nil {
		return err
	}
	for _, v := range p.MapIntStrsetList {
		if err := oprot.WriteMapBegin(thrift.I32, thrift.SET, len(v)); err != nil {
			return err
		}
		for k, v := range v {

			if err := oprot.WriteI32(k); err != nil {
				return err
			}

			if err := oprot.WriteSetBegin(thrift.STRING, len(v)); err != nil {
				return err
			}
			for i := 0; i < len(v); i++ {
				for j := i + 1; j < len(v); j++ {
					if func(tgt, src string) bool {
						if strings.Compare(tgt, src) != 0 {
							return false
						}
						return true
					}(v[i], v[j]) {
						return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v[i]))
					}
				}
			}
			for _, v := range v {
				if err := oprot.WriteString(v); err != nil {
					return err
				}
			}
			if err := oprot.WriteSetEnd(); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *NestedMixedx2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NestedMixedx2(%+v)", *p)
}

func (p *NestedMixedx2) DeepEqual(ano *NestedMixedx2) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.IntSetList) {
		return false
	}
	if !p.Field2DeepEqual(ano.MapIntStrset) {
		return false
	}
	if !p.Field3DeepEqual(ano.MapIntStrsetList) {
		return false
	}
	return true
}

func (p *NestedMixedx2) Field1DeepEqual(src [][]int32) bool {

	if len(p.IntSetList) != len(src) {
		return false
	}
	for i, v := range p.IntSetList {
		_src := src[i]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if v != _src1 {
				return false
			}
		}
	}
	return true
}
func (p *NestedMixedx2) Field2DeepEqual(src map[int32][]string) bool {

	if len(p.MapIntStrset) != len(src) {
		return false
	}
	for k, v := range p.MapIntStrset {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if strings.Compare(v, _src1) != 0 {
				return false
			}
		}
	}
	return true
}
func (p *NestedMixedx2) Field3DeepEqual(src []map[int32][]string) bool {

	if len(p.MapIntStrsetList) != len(src) {
		return false
	}
	for i, v := range p.MapIntStrsetList {
		_src := src[i]
		if len(v) != len(_src) {
			return false
		}
		for k, v := range v {
			_src1 := _src[k]
			if len(v) != len(_src1) {
				return false
			}
			for i, v := range v {
				_src2 := _src1[i]
				if strings.Compare(v, _src2) != 0 {
					return false
				}
			}
		}
	}
	return true
}

type ListBonks struct {
	Bonk []*Bonk `thrift:"bonk,1" json:"bonk"`
}

func NewListBonks() *ListBonks {
	return &ListBonks{}
}

func (p *ListBonks) GetBonk() []*Bonk {
	return p.Bonk
}
func (p *ListBonks) SetBonk(val []*Bonk) {
	p.Bonk = val
}

var fieldIDToName_ListBonks = map[int16]string{
	1: "bonk",
}

func (p *ListBonks) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListBonks[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListBonks) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Bonk = make([]*Bonk, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewBonk()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Bonk = append(p.Bonk, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListBonks) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListBonks"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListBonks) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("bonk", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Bonk)); err != nil {
		return err
	}
	for _, v := range p.Bonk {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListBonks) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListBonks(%+v)", *p)
}

func (p *ListBonks) DeepEqual(ano *ListBonks) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Bonk) {
		return false
	}
	return true
}

func (p *ListBonks) Field1DeepEqual(src []*Bonk) bool {

	if len(p.Bonk) != len(src) {
		return false
	}
	for i, v := range p.Bonk {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type NestedListsBonk struct {
	Bonk [][][]*Bonk `thrift:"bonk,1" json:"bonk"`
}

func NewNestedListsBonk() *NestedListsBonk {
	return &NestedListsBonk{}
}

func (p *NestedListsBonk) GetBonk() [][][]*Bonk {
	return p.Bonk
}
func (p *NestedListsBonk) SetBonk(val [][][]*Bonk) {
	p.Bonk = val
}

var fieldIDToName_NestedListsBonk = map[int16]string{
	1: "bonk",
}

func (p *NestedListsBonk) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NestedListsBonk[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *NestedListsBonk) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Bonk = make([][][]*Bonk, 0, size)
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_elem := make([][]*Bonk, 0, size)
		for i := 0; i < size; i++ {
			_, size, err := iprot.ReadListBegin()
			if err != nil {
				return err
			}
			_elem1 := make([]*Bonk, 0, size)
			for i := 0; i < size; i++ {
				_elem2 := NewBonk()
				if err := _elem2.Read(iprot); err != nil {
					return err
				}

				_elem1 = append(_elem1, _elem2)
			}
			if err := iprot.ReadListEnd(); err != nil {
				return err
			}

			_elem = append(_elem, _elem1)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		p.Bonk = append(p.Bonk, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *NestedListsBonk) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NestedListsBonk"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NestedListsBonk) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("bonk", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.LIST, len(p.Bonk)); err != nil {
		return err
	}
	for _, v := range p.Bonk {
		if err := oprot.WriteListBegin(thrift.LIST, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
				return err
			}
			for _, v := range v {
				if err := v.Write(oprot); err != nil {
					return err
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *NestedListsBonk) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NestedListsBonk(%+v)", *p)
}

func (p *NestedListsBonk) DeepEqual(ano *NestedListsBonk) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Bonk) {
		return false
	}
	return true
}

func (p *NestedListsBonk) Field1DeepEqual(src [][][]*Bonk) bool {

	if len(p.Bonk) != len(src) {
		return false
	}
	for i, v := range p.Bonk {
		_src := src[i]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if len(v) != len(_src1) {
				return false
			}
			for i, v := range v {
				_src2 := _src1[i]
				if !v.DeepEqual(_src2) {
					return false
				}
			}
		}
	}
	return true
}

type BoolTest struct {
	B bool   `thrift:"b,1" json:"b,omitempty"`
	S string `thrift:"s,2" json:"s,omitempty"`
}

func NewBoolTest() *BoolTest {
	return &BoolTest{

		B: true,
		S: "true",
	}
}

var BoolTest_B_DEFAULT bool = true

func (p *BoolTest) GetB() bool {
	if !p.IsSetB() {
		return BoolTest_B_DEFAULT
	}
	return p.B
}

var BoolTest_S_DEFAULT string = "true"

func (p *BoolTest) GetS() string {
	if !p.IsSetS() {
		return BoolTest_S_DEFAULT
	}
	return p.S
}
func (p *BoolTest) SetB(val bool) {
	p.B = val
}
func (p *BoolTest) SetS(val string) {
	p.S = val
}

var fieldIDToName_BoolTest = map[int16]string{
	1: "b",
	2: "s",
}

func (p *BoolTest) IsSetB() bool {
	return p.B != BoolTest_B_DEFAULT
}

func (p *BoolTest) IsSetS() bool {
	return p.S != BoolTest_S_DEFAULT
}

func (p *BoolTest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BoolTest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BoolTest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.B = v
	}
	return nil
}

func (p *BoolTest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.S = v
	}
	return nil
}

func (p *BoolTest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BoolTest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BoolTest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetB() {
		if err = oprot.WriteFieldBegin("b", thrift.BOOL, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.B); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BoolTest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetS() {
		if err = oprot.WriteFieldBegin("s", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.S); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BoolTest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BoolTest(%+v)", *p)
}

func (p *BoolTest) DeepEqual(ano *BoolTest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.B) {
		return false
	}
	if !p.Field2DeepEqual(ano.S) {
		return false
	}
	return true
}

func (p *BoolTest) Field1DeepEqual(src bool) bool {

	if p.B != src {
		return false
	}
	return true
}
func (p *BoolTest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.S, src) != 0 {
		return false
	}
	return true
}

type StructA struct {
	S string `thrift:"s,1,required" json:"s"`
}

func NewStructA() *StructA {
	return &StructA{}
}

func (p *StructA) GetS() string {
	return p.S
}
func (p *StructA) SetS(val string) {
	p.S = val
}

var fieldIDToName_StructA = map[int16]string{
	1: "s",
}

func (p *StructA) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetS bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetS = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetS {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_StructA[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_StructA[fieldId]))
}

func (p *StructA) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.S = v
	}
	return nil
}

func (p *StructA) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("StructA"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *StructA) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("s", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.S); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *StructA) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StructA(%+v)", *p)
}

func (p *StructA) DeepEqual(ano *StructA) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.S) {
		return false
	}
	return true
}

func (p *StructA) Field1DeepEqual(src string) bool {

	if strings.Compare(p.S, src) != 0 {
		return false
	}
	return true
}

type StructB struct {
	Aa *StructA `thrift:"aa,1" json:"aa,omitempty"`
	Ab *StructA `thrift:"ab,2,required" json:"ab"`
}

func NewStructB() *StructB {
	return &StructB{}
}

var StructB_Aa_DEFAULT *StructA

func (p *StructB) GetAa() *StructA {
	if !p.IsSetAa() {
		return StructB_Aa_DEFAULT
	}
	return p.Aa
}

var StructB_Ab_DEFAULT *StructA

func (p *StructB) GetAb() *StructA {
	if !p.IsSetAb() {
		return StructB_Ab_DEFAULT
	}
	return p.Ab
}
func (p *StructB) SetAa(val *StructA) {
	p.Aa = val
}
func (p *StructB) SetAb(val *StructA) {
	p.Ab = val
}

var fieldIDToName_StructB = map[int16]string{
	1: "aa",
	2: "ab",
}

func (p *StructB) IsSetAa() bool {
	return p.Aa != nil
}

func (p *StructB) IsSetAb() bool {
	return p.Ab != nil
}

func (p *StructB) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetAb bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetAb = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetAb {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_StructB[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_StructB[fieldId]))
}

func (p *StructB) ReadField1(iprot thrift.TProtocol) error {
	p.Aa = NewStructA()
	if err := p.Aa.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *StructB) ReadField2(iprot thrift.TProtocol) error {
	p.Ab = NewStructA()
	if err := p.Ab.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *StructB) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("StructB"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *StructB) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAa() {
		if err = oprot.WriteFieldBegin("aa", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Aa.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *StructB) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ab", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Ab.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *StructB) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StructB(%+v)", *p)
}

func (p *StructB) DeepEqual(ano *StructB) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Aa) {
		return false
	}
	if !p.Field2DeepEqual(ano.Ab) {
		return false
	}
	return true
}

func (p *StructB) Field1DeepEqual(src *StructA) bool {

	if !p.Aa.DeepEqual(src) {
		return false
	}
	return true
}
func (p *StructB) Field2DeepEqual(src *StructA) bool {

	if !p.Ab.DeepEqual(src) {
		return false
	}
	return true
}

type OptionalSetDefaultTest struct {
	WithDefault []string `thrift:"with_default,1" json:"with_default,omitempty"`
}

func NewOptionalSetDefaultTest() *OptionalSetDefaultTest {
	return &OptionalSetDefaultTest{

		WithDefault: []string{
			"test",
		},
	}
}

var OptionalSetDefaultTest_WithDefault_DEFAULT []string = []string{
	"test",
}

func (p *OptionalSetDefaultTest) GetWithDefault() []string {
	if !p.IsSetWithDefault() {
		return OptionalSetDefaultTest_WithDefault_DEFAULT
	}
	return p.WithDefault
}
func (p *OptionalSetDefaultTest) SetWithDefault(val []string) {
	p.WithDefault = val
}

var fieldIDToName_OptionalSetDefaultTest = map[int16]string{
	1: "with_default",
}

func (p *OptionalSetDefaultTest) IsSetWithDefault() bool {
	return p.WithDefault != nil
}

func (p *OptionalSetDefaultTest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.SET {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_OptionalSetDefaultTest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *OptionalSetDefaultTest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return err
	}
	p.WithDefault = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.WithDefault = append(p.WithDefault, _elem)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return err
	}
	return nil
}

func (p *OptionalSetDefaultTest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("OptionalSetDefaultTest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *OptionalSetDefaultTest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWithDefault() {
		if err = oprot.WriteFieldBegin("with_default", thrift.SET, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteSetBegin(thrift.STRING, len(p.WithDefault)); err != nil {
			return err
		}
		for i := 0; i < len(p.WithDefault); i++ {
			for j := i + 1; j < len(p.WithDefault); j++ {
				if func(tgt, src string) bool {
					if strings.Compare(tgt, src) != 0 {
						return false
					}
					return true
				}(p.WithDefault[i], p.WithDefault[j]) {
					return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.WithDefault[i]))
				}
			}
		}
		for _, v := range p.WithDefault {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *OptionalSetDefaultTest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OptionalSetDefaultTest(%+v)", *p)
}

func (p *OptionalSetDefaultTest) DeepEqual(ano *OptionalSetDefaultTest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WithDefault) {
		return false
	}
	return true
}

func (p *OptionalSetDefaultTest) Field1DeepEqual(src []string) bool {

	if len(p.WithDefault) != len(src) {
		return false
	}
	for i, v := range p.WithDefault {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type OptionalBinary struct {
	BinSet [][]byte         `thrift:"bin_set,1" json:"bin_set,omitempty"`
	BinMap map[string]int32 `thrift:"bin_map,2" json:"bin_map,omitempty"`
}

func NewOptionalBinary() *OptionalBinary {
	return &OptionalBinary{

		BinSet: [][]byte{},
		BinMap: map[string]int32{},
	}
}

var OptionalBinary_BinSet_DEFAULT [][]byte = [][]byte{}

func (p *OptionalBinary) GetBinSet() [][]byte {
	if !p.IsSetBinSet() {
		return OptionalBinary_BinSet_DEFAULT
	}
	return p.BinSet
}

var OptionalBinary_BinMap_DEFAULT map[string]int32 = map[string]int32{}

func (p *OptionalBinary) GetBinMap() map[string]int32 {
	if !p.IsSetBinMap() {
		return OptionalBinary_BinMap_DEFAULT
	}
	return p.BinMap
}
func (p *OptionalBinary) SetBinSet(val [][]byte) {
	p.BinSet = val
}
func (p *OptionalBinary) SetBinMap(val map[string]int32) {
	p.BinMap = val
}

var fieldIDToName_OptionalBinary = map[int16]string{
	1: "bin_set",
	2: "bin_map",
}

func (p *OptionalBinary) IsSetBinSet() bool {
	return p.BinSet != nil
}

func (p *OptionalBinary) IsSetBinMap() bool {
	return p.BinMap != nil
}

func (p *OptionalBinary) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.SET {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_OptionalBinary[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *OptionalBinary) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return err
	}
	p.BinSet = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return err
		} else {
			_elem = []byte(v)
		}

		p.BinSet = append(p.BinSet, _elem)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return err
	}
	return nil
}

func (p *OptionalBinary) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.BinMap = make(map[string]int32, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadBinary(); err != nil {
			return err
		} else {
			_key = string(v)
		}

		var _val int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_val = v
		}

		p.BinMap[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *OptionalBinary) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("OptionalBinary"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *OptionalBinary) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBinSet() {
		if err = oprot.WriteFieldBegin("bin_set", thrift.SET, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteSetBegin(thrift.STRING, len(p.BinSet)); err != nil {
			return err
		}
		for i := 0; i < len(p.BinSet); i++ {
			for j := i + 1; j < len(p.BinSet); j++ {
				if func(tgt, src []byte) bool {
					if bytes.Compare(tgt, src) != 0 {
						return false
					}
					return true
				}(p.BinSet[i], p.BinSet[j]) {
					return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.BinSet[i]))
				}
			}
		}
		for _, v := range p.BinSet {
			if err := oprot.WriteBinary([]byte(v)); err != nil {
				return err
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *OptionalBinary) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetBinMap() {
		if err = oprot.WriteFieldBegin("bin_map", thrift.MAP, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.BinMap)); err != nil {
			return err
		}
		for k, v := range p.BinMap {

			if err := oprot.WriteBinary([]byte(k)); err != nil {
				return err
			}

			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *OptionalBinary) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OptionalBinary(%+v)", *p)
}

func (p *OptionalBinary) DeepEqual(ano *OptionalBinary) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BinSet) {
		return false
	}
	if !p.Field2DeepEqual(ano.BinMap) {
		return false
	}
	return true
}

func (p *OptionalBinary) Field1DeepEqual(src [][]byte) bool {

	if len(p.BinSet) != len(src) {
		return false
	}
	for i, v := range p.BinSet {
		_src := src[i]
		if bytes.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *OptionalBinary) Field2DeepEqual(src map[string]int32) bool {

	if len(p.BinMap) != len(src) {
		return false
	}
	for k, v := range p.BinMap {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}

type SomeUnion struct {
	MapThing      map[Numberz]UserId `thrift:"map_thing,1" json:"map_thing,omitempty"`
	StringThing   *string            `thrift:"string_thing,2" json:"string_thing,omitempty"`
	I32Thing      *int32             `thrift:"i32_thing,3" json:"i32_thing,omitempty"`
	XtructThing   *Xtruct3           `thrift:"xtruct_thing,4" json:"xtruct_thing,omitempty"`
	InsanityThing *Insanity          `thrift:"insanity_thing,5" json:"insanity_thing,omitempty"`
}

func NewSomeUnion() *SomeUnion {
	return &SomeUnion{}
}

var SomeUnion_MapThing_DEFAULT map[Numberz]UserId

func (p *SomeUnion) GetMapThing() map[Numberz]UserId {
	if !p.IsSetMapThing() {
		return SomeUnion_MapThing_DEFAULT
	}
	return p.MapThing
}

var SomeUnion_StringThing_DEFAULT string

func (p *SomeUnion) GetStringThing() string {
	if !p.IsSetStringThing() {
		return SomeUnion_StringThing_DEFAULT
	}
	return *p.StringThing
}

var SomeUnion_I32Thing_DEFAULT int32

func (p *SomeUnion) GetI32Thing() int32 {
	if !p.IsSetI32Thing() {
		return SomeUnion_I32Thing_DEFAULT
	}
	return *p.I32Thing
}

var SomeUnion_XtructThing_DEFAULT *Xtruct3

func (p *SomeUnion) GetXtructThing() *Xtruct3 {
	if !p.IsSetXtructThing() {
		return SomeUnion_XtructThing_DEFAULT
	}
	return p.XtructThing
}

var SomeUnion_InsanityThing_DEFAULT *Insanity

func (p *SomeUnion) GetInsanityThing() *Insanity {
	if !p.IsSetInsanityThing() {
		return SomeUnion_InsanityThing_DEFAULT
	}
	return p.InsanityThing
}
func (p *SomeUnion) SetMapThing(val map[Numberz]UserId) {
	p.MapThing = val
}
func (p *SomeUnion) SetStringThing(val *string) {
	p.StringThing = val
}
func (p *SomeUnion) SetI32Thing(val *int32) {
	p.I32Thing = val
}
func (p *SomeUnion) SetXtructThing(val *Xtruct3) {
	p.XtructThing = val
}
func (p *SomeUnion) SetInsanityThing(val *Insanity) {
	p.InsanityThing = val
}

func (p *SomeUnion) CountSetFieldsSomeUnion() int {
	count := 0
	if p.IsSetMapThing() {
		count++
	}
	if p.IsSetStringThing() {
		count++
	}
	if p.IsSetI32Thing() {
		count++
	}
	if p.IsSetXtructThing() {
		count++
	}
	if p.IsSetInsanityThing() {
		count++
	}
	return count
}

var fieldIDToName_SomeUnion = map[int16]string{
	1: "map_thing",
	2: "string_thing",
	3: "i32_thing",
	4: "xtruct_thing",
	5: "insanity_thing",
}

func (p *SomeUnion) IsSetMapThing() bool {
	return p.MapThing != nil
}

func (p *SomeUnion) IsSetStringThing() bool {
	return p.StringThing != nil
}

func (p *SomeUnion) IsSetI32Thing() bool {
	return p.I32Thing != nil
}

func (p *SomeUnion) IsSetXtructThing() bool {
	return p.XtructThing != nil
}

func (p *SomeUnion) IsSetInsanityThing() bool {
	return p.InsanityThing != nil
}

func (p *SomeUnion) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SomeUnion[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SomeUnion) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.MapThing = make(map[Numberz]UserId, size)
	for i := 0; i < size; i++ {
		var _key Numberz
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = Numberz(v)
		}

		var _val UserId
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_val = v
		}

		p.MapThing[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *SomeUnion) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.StringThing = &v
	}
	return nil
}

func (p *SomeUnion) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.I32Thing = &v
	}
	return nil
}

func (p *SomeUnion) ReadField4(iprot thrift.TProtocol) error {
	p.XtructThing = NewXtruct3()
	if err := p.XtructThing.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SomeUnion) ReadField5(iprot thrift.TProtocol) error {
	p.InsanityThing = NewInsanity()
	if err := p.InsanityThing.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SomeUnion) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	var c int
	if c = p.CountSetFieldsSomeUnion(); c != 1 {
		goto CountSetFieldsError
	}
	if err = oprot.WriteStructBegin("SomeUnion"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
CountSetFieldsError:
	return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SomeUnion) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMapThing() {
		if err = oprot.WriteFieldBegin("map_thing", thrift.MAP, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.I64, len(p.MapThing)); err != nil {
			return err
		}
		for k, v := range p.MapThing {

			if err := oprot.WriteI32(int32(k)); err != nil {
				return err
			}

			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SomeUnion) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStringThing() {
		if err = oprot.WriteFieldBegin("string_thing", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.StringThing); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SomeUnion) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetI32Thing() {
		if err = oprot.WriteFieldBegin("i32_thing", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.I32Thing); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *SomeUnion) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetXtructThing() {
		if err = oprot.WriteFieldBegin("xtruct_thing", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.XtructThing.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *SomeUnion) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetInsanityThing() {
		if err = oprot.WriteFieldBegin("insanity_thing", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.InsanityThing.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *SomeUnion) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SomeUnion(%+v)", *p)
}

func (p *SomeUnion) DeepEqual(ano *SomeUnion) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MapThing) {
		return false
	}
	if !p.Field2DeepEqual(ano.StringThing) {
		return false
	}
	if !p.Field3DeepEqual(ano.I32Thing) {
		return false
	}
	if !p.Field4DeepEqual(ano.XtructThing) {
		return false
	}
	if !p.Field5DeepEqual(ano.InsanityThing) {
		return false
	}
	return true
}

func (p *SomeUnion) Field1DeepEqual(src map[Numberz]UserId) bool {

	if len(p.MapThing) != len(src) {
		return false
	}
	for k, v := range p.MapThing {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *SomeUnion) Field2DeepEqual(src *string) bool {

	if p.StringThing == src {
		return true
	} else if p.StringThing == nil || src == nil {
		return false
	}
	if strings.Compare(*p.StringThing, *src) != 0 {
		return false
	}
	return true
}
func (p *SomeUnion) Field3DeepEqual(src *int32) bool {

	if p.I32Thing == src {
		return true
	} else if p.I32Thing == nil || src == nil {
		return false
	}
	if *p.I32Thing != *src {
		return false
	}
	return true
}
func (p *SomeUnion) Field4DeepEqual(src *Xtruct3) bool {

	if !p.XtructThing.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SomeUnion) Field5DeepEqual(src *Insanity) bool {

	if !p.InsanityThing.DeepEqual(src) {
		return false
	}
	return true
}

type Xception struct {
	ErrorCode int32  `thrift:"errorCode,1" json:"errorCode"`
	Message   string `thrift:"message,2" json:"message"`
}

func NewXception() *Xception {
	return &Xception{}
}

func (p *Xception) GetErrorCode() int32 {
	return p.ErrorCode
}

func (p *Xception) GetMessage() string {
	return p.Message
}
func (p *Xception) SetErrorCode(val int32) {
	p.ErrorCode = val
}
func (p *Xception) SetMessage(val string) {
	p.Message = val
}

var fieldIDToName_Xception = map[int16]string{
	1: "errorCode",
	2: "message",
}

func (p *Xception) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Xception[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Xception) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ErrorCode = v
	}
	return nil
}

func (p *Xception) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *Xception) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Xception"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Xception) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("errorCode", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ErrorCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Xception) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Xception) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Xception(%+v)", *p)
}
func (p *Xception) Error() string {
	return p.String()
}

func (p *Xception) DeepEqual(ano *Xception) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ErrorCode) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *Xception) Field1DeepEqual(src int32) bool {

	if p.ErrorCode != src {
		return false
	}
	return true
}
func (p *Xception) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}

type Xception2 struct {
	ErrorCode   int32   `thrift:"errorCode,1" json:"errorCode"`
	StructThing *Xtruct `thrift:"struct_thing,2" json:"struct_thing"`
}

func NewXception2() *Xception2 {
	return &Xception2{}
}

func (p *Xception2) GetErrorCode() int32 {
	return p.ErrorCode
}

var Xception2_StructThing_DEFAULT *Xtruct

func (p *Xception2) GetStructThing() *Xtruct {
	if !p.IsSetStructThing() {
		return Xception2_StructThing_DEFAULT
	}
	return p.StructThing
}
func (p *Xception2) SetErrorCode(val int32) {
	p.ErrorCode = val
}
func (p *Xception2) SetStructThing(val *Xtruct) {
	p.StructThing = val
}

var fieldIDToName_Xception2 = map[int16]string{
	1: "errorCode",
	2: "struct_thing",
}

func (p *Xception2) IsSetStructThing() bool {
	return p.StructThing != nil
}

func (p *Xception2) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Xception2[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Xception2) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ErrorCode = v
	}
	return nil
}

func (p *Xception2) ReadField2(iprot thrift.TProtocol) error {
	p.StructThing = NewXtruct()
	if err := p.StructThing.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *Xception2) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Xception2"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Xception2) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("errorCode", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ErrorCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Xception2) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("struct_thing", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.StructThing.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Xception2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Xception2(%+v)", *p)
}
func (p *Xception2) Error() string {
	return p.String()
}

func (p *Xception2) DeepEqual(ano *Xception2) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ErrorCode) {
		return false
	}
	if !p.Field2DeepEqual(ano.StructThing) {
		return false
	}
	return true
}

func (p *Xception2) Field1DeepEqual(src int32) bool {

	if p.ErrorCode != src {
		return false
	}
	return true
}
func (p *Xception2) Field2DeepEqual(src *Xtruct) bool {

	if !p.StructThing.DeepEqual(src) {
		return false
	}
	return true
}

type ThriftTest interface {
	TestVoid(ctx context.Context) (err error)

	TestString(ctx context.Context, thing string) (r string, err error)

	TestBool(ctx context.Context, thing bool) (r bool, err error)

	TestByte(ctx context.Context, thing int8) (r int8, err error)

	TestI32(ctx context.Context, thing int32) (r int32, err error)

	TestI64(ctx context.Context, thing int64) (r int64, err error)

	TestDouble(ctx context.Context, thing float64) (r float64, err error)

	TestBinary(ctx context.Context, thing []byte) (r []byte, err error)

	TestStruct(ctx context.Context, thing *Xtruct) (r *Xtruct, err error)

	TestNest(ctx context.Context, thing *Xtruct2) (r *Xtruct2, err error)

	TestMap(ctx context.Context, thing map[int32]int32) (r map[int32]int32, err error)

	TestStringMap(ctx context.Context, thing map[string]string) (r map[string]string, err error)

	TestSet(ctx context.Context, thing []int32) (r []int32, err error)

	TestList(ctx context.Context, thing []int32) (r []int32, err error)

	TestEnum(ctx context.Context, thing Numberz) (r Numberz, err error)

	TestTypedef(ctx context.Context, thing UserId) (r UserId, err error)

	TestMapMap(ctx context.Context, hello int32) (r map[int32]map[int32]int32, err error)

	TestInsanity(ctx context.Context, argument *Insanity) (r map[UserId]map[Numberz]*Insanity, err error)

	TestMulti(ctx context.Context, arg0 int8, arg1 int32, arg2 int64, arg3 map[int16]string, arg4 Numberz, arg5 UserId) (r *Xtruct, err error)

	TestException(ctx context.Context, arg string) (err error)

	TestMultiException(ctx context.Context, arg0 string, arg1 string) (r *Xtruct, err error)

	TestOneway(ctx context.Context, secondsToSleep int32) (err error)
}

type ThriftTestClient struct {
	c thrift.TClient
}

func NewThriftTestClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ThriftTestClient {
	return &ThriftTestClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewThriftTestClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ThriftTestClient {
	return &ThriftTestClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewThriftTestClient(c thrift.TClient) *ThriftTestClient {
	return &ThriftTestClient{
		c: c,
	}
}

func (p *ThriftTestClient) Client_() thrift.TClient {
	return p.c
}

func (p *ThriftTestClient) TestVoid(ctx context.Context) (err error) {
	var _args ThriftTestTestVoidArgs
	var _result ThriftTestTestVoidResult
	if err = p.Client_().Call(ctx, "testVoid", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *ThriftTestClient) TestString(ctx context.Context, thing string) (r string, err error) {
	var _args ThriftTestTestStringArgs
	_args.Thing = thing
	var _result ThriftTestTestStringResult
	if err = p.Client_().Call(ctx, "testString", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *ThriftTestClient) TestBool(ctx context.Context, thing bool) (r bool, err error) {
	var _args ThriftTestTestBoolArgs
	_args.Thing = thing
	var _result ThriftTestTestBoolResult
	if err = p.Client_().Call(ctx, "testBool", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *ThriftTestClient) TestByte(ctx context.Context, thing int8) (r int8, err error) {
	var _args ThriftTestTestByteArgs
	_args.Thing = thing
	var _result ThriftTestTestByteResult
	if err = p.Client_().Call(ctx, "testByte", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *ThriftTestClient) TestI32(ctx context.Context, thing int32) (r int32, err error) {
	var _args ThriftTestTestI32Args
	_args.Thing = thing
	var _result ThriftTestTestI32Result
	if err = p.Client_().Call(ctx, "testI32", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *ThriftTestClient) TestI64(ctx context.Context, thing int64) (r int64, err error) {
	var _args ThriftTestTestI64Args
	_args.Thing = thing
	var _result ThriftTestTestI64Result
	if err = p.Client_().Call(ctx, "testI64", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *ThriftTestClient) TestDouble(ctx context.Context, thing float64) (r float64, err error) {
	var _args ThriftTestTestDoubleArgs
	_args.Thing = thing
	var _result ThriftTestTestDoubleResult
	if err = p.Client_().Call(ctx, "testDouble", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *ThriftTestClient) TestBinary(ctx context.Context, thing []byte) (r []byte, err error) {
	var _args ThriftTestTestBinaryArgs
	_args.Thing = thing
	var _result ThriftTestTestBinaryResult
	if err = p.Client_().Call(ctx, "testBinary", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *ThriftTestClient) TestStruct(ctx context.Context, thing *Xtruct) (r *Xtruct, err error) {
	var _args ThriftTestTestStructArgs
	_args.Thing = thing
	var _result ThriftTestTestStructResult
	if err = p.Client_().Call(ctx, "testStruct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *ThriftTestClient) TestNest(ctx context.Context, thing *Xtruct2) (r *Xtruct2, err error) {
	var _args ThriftTestTestNestArgs
	_args.Thing = thing
	var _result ThriftTestTestNestResult
	if err = p.Client_().Call(ctx, "testNest", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *ThriftTestClient) TestMap(ctx context.Context, thing map[int32]int32) (r map[int32]int32, err error) {
	var _args ThriftTestTestMapArgs
	_args.Thing = thing
	var _result ThriftTestTestMapResult
	if err = p.Client_().Call(ctx, "testMap", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *ThriftTestClient) TestStringMap(ctx context.Context, thing map[string]string) (r map[string]string, err error) {
	var _args ThriftTestTestStringMapArgs
	_args.Thing = thing
	var _result ThriftTestTestStringMapResult
	if err = p.Client_().Call(ctx, "testStringMap", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *ThriftTestClient) TestSet(ctx context.Context, thing []int32) (r []int32, err error) {
	var _args ThriftTestTestSetArgs
	_args.Thing = thing
	var _result ThriftTestTestSetResult
	if err = p.Client_().Call(ctx, "testSet", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *ThriftTestClient) TestList(ctx context.Context, thing []int32) (r []int32, err error) {
	var _args ThriftTestTestListArgs
	_args.Thing = thing
	var _result ThriftTestTestListResult
	if err = p.Client_().Call(ctx, "testList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *ThriftTestClient) TestEnum(ctx context.Context, thing Numberz) (r Numberz, err error) {
	var _args ThriftTestTestEnumArgs
	_args.Thing = thing
	var _result ThriftTestTestEnumResult
	if err = p.Client_().Call(ctx, "testEnum", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *ThriftTestClient) TestTypedef(ctx context.Context, thing UserId) (r UserId, err error) {
	var _args ThriftTestTestTypedefArgs
	_args.Thing = thing
	var _result ThriftTestTestTypedefResult
	if err = p.Client_().Call(ctx, "testTypedef", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *ThriftTestClient) TestMapMap(ctx context.Context, hello int32) (r map[int32]map[int32]int32, err error) {
	var _args ThriftTestTestMapMapArgs
	_args.Hello = hello
	var _result ThriftTestTestMapMapResult
	if err = p.Client_().Call(ctx, "testMapMap", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *ThriftTestClient) TestInsanity(ctx context.Context, argument *Insanity) (r map[UserId]map[Numberz]*Insanity, err error) {
	var _args ThriftTestTestInsanityArgs
	_args.Argument = argument
	var _result ThriftTestTestInsanityResult
	if err = p.Client_().Call(ctx, "testInsanity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *ThriftTestClient) TestMulti(ctx context.Context, arg0 int8, arg1 int32, arg2 int64, arg3 map[int16]string, arg4 Numberz, arg5 UserId) (r *Xtruct, err error) {
	var _args ThriftTestTestMultiArgs
	_args.Arg0 = arg0
	_args.Arg1 = arg1
	_args.Arg2 = arg2
	_args.Arg3 = arg3
	_args.Arg4 = arg4
	_args.Arg5 = arg5
	var _result ThriftTestTestMultiResult
	if err = p.Client_().Call(ctx, "testMulti", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *ThriftTestClient) TestException(ctx context.Context, arg string) (err error) {
	var _args ThriftTestTestExceptionArgs
	_args.Arg = arg
	var _result ThriftTestTestExceptionResult
	if err = p.Client_().Call(ctx, "testException", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *ThriftTestClient) TestMultiException(ctx context.Context, arg0 string, arg1 string) (r *Xtruct, err error) {
	var _args ThriftTestTestMultiExceptionArgs
	_args.Arg0 = arg0
	_args.Arg1 = arg1
	var _result ThriftTestTestMultiExceptionResult
	if err = p.Client_().Call(ctx, "testMultiException", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err1 != nil:
		return r, _result.Err1
	case _result.Err2 != nil:
		return r, _result.Err2
	}
	return _result.GetSuccess(), nil
}

func (p *ThriftTestClient) TestOneway(ctx context.Context, secondsToSleep int32) (err error) {
	var _args ThriftTestTestOnewayArgs
	_args.SecondsToSleep = secondsToSleep
	if err = p.Client_().Call(ctx, "testOneway", &_args, nil); err != nil {
		return
	}
	return nil
}

type SecondService interface {
	SecondtestString(ctx context.Context, thing string) (r string, err error)
}

type SecondServiceClient struct {
	c thrift.TClient
}

func NewSecondServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SecondServiceClient {
	return &SecondServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewSecondServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SecondServiceClient {
	return &SecondServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewSecondServiceClient(c thrift.TClient) *SecondServiceClient {
	return &SecondServiceClient{
		c: c,
	}
}

func (p *SecondServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *SecondServiceClient) SecondtestString(ctx context.Context, thing string) (r string, err error) {
	var _args SecondServiceSecondtestStringArgs
	_args.Thing = thing
	var _result SecondServiceSecondtestStringResult
	if err = p.Client_().Call(ctx, "secondtestString", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type ThriftTestProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      ThriftTest
}

func (p *ThriftTestProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ThriftTestProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ThriftTestProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewThriftTestProcessor(handler ThriftTest) *ThriftTestProcessor {
	self := &ThriftTestProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("testVoid", &thriftTestProcessorTestVoid{handler: handler})
	self.AddToProcessorMap("testString", &thriftTestProcessorTestString{handler: handler})
	self.AddToProcessorMap("testBool", &thriftTestProcessorTestBool{handler: handler})
	self.AddToProcessorMap("testByte", &thriftTestProcessorTestByte{handler: handler})
	self.AddToProcessorMap("testI32", &thriftTestProcessorTestI32{handler: handler})
	self.AddToProcessorMap("testI64", &thriftTestProcessorTestI64{handler: handler})
	self.AddToProcessorMap("testDouble", &thriftTestProcessorTestDouble{handler: handler})
	self.AddToProcessorMap("testBinary", &thriftTestProcessorTestBinary{handler: handler})
	self.AddToProcessorMap("testStruct", &thriftTestProcessorTestStruct{handler: handler})
	self.AddToProcessorMap("testNest", &thriftTestProcessorTestNest{handler: handler})
	self.AddToProcessorMap("testMap", &thriftTestProcessorTestMap{handler: handler})
	self.AddToProcessorMap("testStringMap", &thriftTestProcessorTestStringMap{handler: handler})
	self.AddToProcessorMap("testSet", &thriftTestProcessorTestSet{handler: handler})
	self.AddToProcessorMap("testList", &thriftTestProcessorTestList{handler: handler})
	self.AddToProcessorMap("testEnum", &thriftTestProcessorTestEnum{handler: handler})
	self.AddToProcessorMap("testTypedef", &thriftTestProcessorTestTypedef{handler: handler})
	self.AddToProcessorMap("testMapMap", &thriftTestProcessorTestMapMap{handler: handler})
	self.AddToProcessorMap("testInsanity", &thriftTestProcessorTestInsanity{handler: handler})
	self.AddToProcessorMap("testMulti", &thriftTestProcessorTestMulti{handler: handler})
	self.AddToProcessorMap("testException", &thriftTestProcessorTestException{handler: handler})
	self.AddToProcessorMap("testMultiException", &thriftTestProcessorTestMultiException{handler: handler})
	self.AddToProcessorMap("testOneway", &thriftTestProcessorTestOneway{handler: handler})
	return self
}
func (p *ThriftTestProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type thriftTestProcessorTestVoid struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestVoid) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftTestTestVoidArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testVoid", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ThriftTestTestVoidResult{}
	if err2 = p.handler.TestVoid(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testVoid: "+err2.Error())
		oprot.WriteMessageBegin("testVoid", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("testVoid", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftTestProcessorTestString struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestString) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftTestTestStringArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testString", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ThriftTestTestStringResult{}
	var retval string
	if retval, err2 = p.handler.TestString(ctx, args.Thing); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testString: "+err2.Error())
		oprot.WriteMessageBegin("testString", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("testString", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftTestProcessorTestBool struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestBool) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftTestTestBoolArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testBool", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ThriftTestTestBoolResult{}
	var retval bool
	if retval, err2 = p.handler.TestBool(ctx, args.Thing); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testBool: "+err2.Error())
		oprot.WriteMessageBegin("testBool", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("testBool", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftTestProcessorTestByte struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestByte) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftTestTestByteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testByte", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ThriftTestTestByteResult{}
	var retval int8
	if retval, err2 = p.handler.TestByte(ctx, args.Thing); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testByte: "+err2.Error())
		oprot.WriteMessageBegin("testByte", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("testByte", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftTestProcessorTestI32 struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestI32) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftTestTestI32Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testI32", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ThriftTestTestI32Result{}
	var retval int32
	if retval, err2 = p.handler.TestI32(ctx, args.Thing); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testI32: "+err2.Error())
		oprot.WriteMessageBegin("testI32", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("testI32", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftTestProcessorTestI64 struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestI64) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftTestTestI64Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testI64", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ThriftTestTestI64Result{}
	var retval int64
	if retval, err2 = p.handler.TestI64(ctx, args.Thing); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testI64: "+err2.Error())
		oprot.WriteMessageBegin("testI64", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("testI64", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftTestProcessorTestDouble struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestDouble) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftTestTestDoubleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testDouble", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ThriftTestTestDoubleResult{}
	var retval float64
	if retval, err2 = p.handler.TestDouble(ctx, args.Thing); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testDouble: "+err2.Error())
		oprot.WriteMessageBegin("testDouble", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("testDouble", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftTestProcessorTestBinary struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestBinary) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftTestTestBinaryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testBinary", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ThriftTestTestBinaryResult{}
	var retval []byte
	if retval, err2 = p.handler.TestBinary(ctx, args.Thing); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testBinary: "+err2.Error())
		oprot.WriteMessageBegin("testBinary", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("testBinary", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftTestProcessorTestStruct struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestStruct) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftTestTestStructArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testStruct", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ThriftTestTestStructResult{}
	var retval *Xtruct
	if retval, err2 = p.handler.TestStruct(ctx, args.Thing); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testStruct: "+err2.Error())
		oprot.WriteMessageBegin("testStruct", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("testStruct", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftTestProcessorTestNest struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestNest) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftTestTestNestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testNest", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ThriftTestTestNestResult{}
	var retval *Xtruct2
	if retval, err2 = p.handler.TestNest(ctx, args.Thing); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testNest: "+err2.Error())
		oprot.WriteMessageBegin("testNest", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("testNest", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftTestProcessorTestMap struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestMap) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftTestTestMapArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testMap", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ThriftTestTestMapResult{}
	var retval map[int32]int32
	if retval, err2 = p.handler.TestMap(ctx, args.Thing); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testMap: "+err2.Error())
		oprot.WriteMessageBegin("testMap", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("testMap", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftTestProcessorTestStringMap struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestStringMap) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftTestTestStringMapArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testStringMap", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ThriftTestTestStringMapResult{}
	var retval map[string]string
	if retval, err2 = p.handler.TestStringMap(ctx, args.Thing); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testStringMap: "+err2.Error())
		oprot.WriteMessageBegin("testStringMap", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("testStringMap", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftTestProcessorTestSet struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestSet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftTestTestSetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testSet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ThriftTestTestSetResult{}
	var retval []int32
	if retval, err2 = p.handler.TestSet(ctx, args.Thing); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testSet: "+err2.Error())
		oprot.WriteMessageBegin("testSet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("testSet", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftTestProcessorTestList struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftTestTestListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ThriftTestTestListResult{}
	var retval []int32
	if retval, err2 = p.handler.TestList(ctx, args.Thing); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testList: "+err2.Error())
		oprot.WriteMessageBegin("testList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("testList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftTestProcessorTestEnum struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestEnum) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftTestTestEnumArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testEnum", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ThriftTestTestEnumResult{}
	var retval Numberz
	if retval, err2 = p.handler.TestEnum(ctx, args.Thing); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testEnum: "+err2.Error())
		oprot.WriteMessageBegin("testEnum", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("testEnum", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftTestProcessorTestTypedef struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestTypedef) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftTestTestTypedefArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testTypedef", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ThriftTestTestTypedefResult{}
	var retval UserId
	if retval, err2 = p.handler.TestTypedef(ctx, args.Thing); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testTypedef: "+err2.Error())
		oprot.WriteMessageBegin("testTypedef", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("testTypedef", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftTestProcessorTestMapMap struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestMapMap) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftTestTestMapMapArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testMapMap", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ThriftTestTestMapMapResult{}
	var retval map[int32]map[int32]int32
	if retval, err2 = p.handler.TestMapMap(ctx, args.Hello); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testMapMap: "+err2.Error())
		oprot.WriteMessageBegin("testMapMap", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("testMapMap", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftTestProcessorTestInsanity struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestInsanity) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftTestTestInsanityArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testInsanity", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ThriftTestTestInsanityResult{}
	var retval map[UserId]map[Numberz]*Insanity
	if retval, err2 = p.handler.TestInsanity(ctx, args.Argument); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testInsanity: "+err2.Error())
		oprot.WriteMessageBegin("testInsanity", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("testInsanity", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftTestProcessorTestMulti struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestMulti) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftTestTestMultiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testMulti", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ThriftTestTestMultiResult{}
	var retval *Xtruct
	if retval, err2 = p.handler.TestMulti(ctx, args.Arg0, args.Arg1, args.Arg2, args.Arg3, args.Arg4, args.Arg5); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testMulti: "+err2.Error())
		oprot.WriteMessageBegin("testMulti", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("testMulti", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftTestProcessorTestException struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestException) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftTestTestExceptionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testException", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ThriftTestTestExceptionResult{}
	if err2 = p.handler.TestException(ctx, args.Arg); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Err1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testException: "+err2.Error())
			oprot.WriteMessageBegin("testException", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("testException", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftTestProcessorTestMultiException struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestMultiException) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftTestTestMultiExceptionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testMultiException", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ThriftTestTestMultiExceptionResult{}
	var retval *Xtruct
	if retval, err2 = p.handler.TestMultiException(ctx, args.Arg0, args.Arg1); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Err1 = v
		case *Xception2:
			result.Err2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testMultiException: "+err2.Error())
			oprot.WriteMessageBegin("testMultiException", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("testMultiException", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftTestProcessorTestOneway struct {
	handler ThriftTest
}

func (p *thriftTestProcessorTestOneway) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftTestTestOnewayArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.TestOneway(ctx, args.SecondsToSleep); err2 != nil {
		return true, err2
	}
	return true, nil
}

type ThriftTestTestVoidArgs struct {
}

func NewThriftTestTestVoidArgs() *ThriftTestTestVoidArgs {
	return &ThriftTestTestVoidArgs{}
}

var fieldIDToName_ThriftTestTestVoidArgs = map[int16]string{}

func (p *ThriftTestTestVoidArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestVoidArgs) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("testVoid_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestVoidArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestVoidArgs(%+v)", *p)
}

func (p *ThriftTestTestVoidArgs) DeepEqual(ano *ThriftTestTestVoidArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type ThriftTestTestVoidResult struct {
}

func NewThriftTestTestVoidResult() *ThriftTestTestVoidResult {
	return &ThriftTestTestVoidResult{}
}

var fieldIDToName_ThriftTestTestVoidResult = map[int16]string{}

func (p *ThriftTestTestVoidResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestVoidResult) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("testVoid_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestVoidResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestVoidResult(%+v)", *p)
}

func (p *ThriftTestTestVoidResult) DeepEqual(ano *ThriftTestTestVoidResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type ThriftTestTestStringArgs struct {
	Thing string `thrift:"thing,1" json:"thing"`
}

func NewThriftTestTestStringArgs() *ThriftTestTestStringArgs {
	return &ThriftTestTestStringArgs{}
}

func (p *ThriftTestTestStringArgs) GetThing() string {
	return p.Thing
}
func (p *ThriftTestTestStringArgs) SetThing(val string) {
	p.Thing = val
}

var fieldIDToName_ThriftTestTestStringArgs = map[int16]string{
	1: "thing",
}

func (p *ThriftTestTestStringArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestStringArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestStringArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Thing = v
	}
	return nil
}

func (p *ThriftTestTestStringArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testString_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestStringArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("thing", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Thing); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ThriftTestTestStringArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestStringArgs(%+v)", *p)
}

func (p *ThriftTestTestStringArgs) DeepEqual(ano *ThriftTestTestStringArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Thing) {
		return false
	}
	return true
}

func (p *ThriftTestTestStringArgs) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Thing, src) != 0 {
		return false
	}
	return true
}

type ThriftTestTestStringResult struct {
	Success *string `thrift:"success,0" json:"success,omitempty"`
}

func NewThriftTestTestStringResult() *ThriftTestTestStringResult {
	return &ThriftTestTestStringResult{}
}

var ThriftTestTestStringResult_Success_DEFAULT string

func (p *ThriftTestTestStringResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return ThriftTestTestStringResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ThriftTestTestStringResult) SetSuccess(x interface{}) {
	p.Success = x.(*string)
}

var fieldIDToName_ThriftTestTestStringResult = map[int16]string{
	0: "success",
}

func (p *ThriftTestTestStringResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestStringResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestStringResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestStringResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ThriftTestTestStringResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testString_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestStringResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Success); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ThriftTestTestStringResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestStringResult(%+v)", *p)
}

func (p *ThriftTestTestStringResult) DeepEqual(ano *ThriftTestTestStringResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ThriftTestTestStringResult) Field0DeepEqual(src *string) bool {

	if p.Success == src {
		return true
	} else if p.Success == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Success, *src) != 0 {
		return false
	}
	return true
}

type ThriftTestTestBoolArgs struct {
	Thing bool `thrift:"thing,1" json:"thing"`
}

func NewThriftTestTestBoolArgs() *ThriftTestTestBoolArgs {
	return &ThriftTestTestBoolArgs{}
}

func (p *ThriftTestTestBoolArgs) GetThing() bool {
	return p.Thing
}
func (p *ThriftTestTestBoolArgs) SetThing(val bool) {
	p.Thing = val
}

var fieldIDToName_ThriftTestTestBoolArgs = map[int16]string{
	1: "thing",
}

func (p *ThriftTestTestBoolArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestBoolArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestBoolArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.Thing = v
	}
	return nil
}

func (p *ThriftTestTestBoolArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testBool_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestBoolArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("thing", thrift.BOOL, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Thing); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ThriftTestTestBoolArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestBoolArgs(%+v)", *p)
}

func (p *ThriftTestTestBoolArgs) DeepEqual(ano *ThriftTestTestBoolArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Thing) {
		return false
	}
	return true
}

func (p *ThriftTestTestBoolArgs) Field1DeepEqual(src bool) bool {

	if p.Thing != src {
		return false
	}
	return true
}

type ThriftTestTestBoolResult struct {
	Success *bool `thrift:"success,0" json:"success,omitempty"`
}

func NewThriftTestTestBoolResult() *ThriftTestTestBoolResult {
	return &ThriftTestTestBoolResult{}
}

var ThriftTestTestBoolResult_Success_DEFAULT bool

func (p *ThriftTestTestBoolResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return ThriftTestTestBoolResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ThriftTestTestBoolResult) SetSuccess(x interface{}) {
	p.Success = x.(*bool)
}

var fieldIDToName_ThriftTestTestBoolResult = map[int16]string{
	0: "success",
}

func (p *ThriftTestTestBoolResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestBoolResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestBoolResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestBoolResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ThriftTestTestBoolResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testBool_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestBoolResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Success); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ThriftTestTestBoolResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestBoolResult(%+v)", *p)
}

func (p *ThriftTestTestBoolResult) DeepEqual(ano *ThriftTestTestBoolResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ThriftTestTestBoolResult) Field0DeepEqual(src *bool) bool {

	if p.Success == src {
		return true
	} else if p.Success == nil || src == nil {
		return false
	}
	if *p.Success != *src {
		return false
	}
	return true
}

type ThriftTestTestByteArgs struct {
	Thing int8 `thrift:"thing,1" json:"thing"`
}

func NewThriftTestTestByteArgs() *ThriftTestTestByteArgs {
	return &ThriftTestTestByteArgs{}
}

func (p *ThriftTestTestByteArgs) GetThing() int8 {
	return p.Thing
}
func (p *ThriftTestTestByteArgs) SetThing(val int8) {
	p.Thing = val
}

var fieldIDToName_ThriftTestTestByteArgs = map[int16]string{
	1: "thing",
}

func (p *ThriftTestTestByteArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestByteArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestByteArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.Thing = v
	}
	return nil
}

func (p *ThriftTestTestByteArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testByte_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestByteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("thing", thrift.BYTE, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Thing); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ThriftTestTestByteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestByteArgs(%+v)", *p)
}

func (p *ThriftTestTestByteArgs) DeepEqual(ano *ThriftTestTestByteArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Thing) {
		return false
	}
	return true
}

func (p *ThriftTestTestByteArgs) Field1DeepEqual(src int8) bool {

	if p.Thing != src {
		return false
	}
	return true
}

type ThriftTestTestByteResult struct {
	Success *int8 `thrift:"success,0" json:"success,omitempty"`
}

func NewThriftTestTestByteResult() *ThriftTestTestByteResult {
	return &ThriftTestTestByteResult{}
}

var ThriftTestTestByteResult_Success_DEFAULT int8

func (p *ThriftTestTestByteResult) GetSuccess() int8 {
	if !p.IsSetSuccess() {
		return ThriftTestTestByteResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ThriftTestTestByteResult) SetSuccess(x interface{}) {
	p.Success = x.(*int8)
}

var fieldIDToName_ThriftTestTestByteResult = map[int16]string{
	0: "success",
}

func (p *ThriftTestTestByteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestByteResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestByteResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestByteResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ThriftTestTestByteResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testByte_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestByteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.BYTE, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteByte(*p.Success); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ThriftTestTestByteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestByteResult(%+v)", *p)
}

func (p *ThriftTestTestByteResult) DeepEqual(ano *ThriftTestTestByteResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ThriftTestTestByteResult) Field0DeepEqual(src *int8) bool {

	if p.Success == src {
		return true
	} else if p.Success == nil || src == nil {
		return false
	}
	if *p.Success != *src {
		return false
	}
	return true
}

type ThriftTestTestI32Args struct {
	Thing int32 `thrift:"thing,1" json:"thing"`
}

func NewThriftTestTestI32Args() *ThriftTestTestI32Args {
	return &ThriftTestTestI32Args{}
}

func (p *ThriftTestTestI32Args) GetThing() int32 {
	return p.Thing
}
func (p *ThriftTestTestI32Args) SetThing(val int32) {
	p.Thing = val
}

var fieldIDToName_ThriftTestTestI32Args = map[int16]string{
	1: "thing",
}

func (p *ThriftTestTestI32Args) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestI32Args[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestI32Args) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Thing = v
	}
	return nil
}

func (p *ThriftTestTestI32Args) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testI32_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestI32Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("thing", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Thing); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ThriftTestTestI32Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestI32Args(%+v)", *p)
}

func (p *ThriftTestTestI32Args) DeepEqual(ano *ThriftTestTestI32Args) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Thing) {
		return false
	}
	return true
}

func (p *ThriftTestTestI32Args) Field1DeepEqual(src int32) bool {

	if p.Thing != src {
		return false
	}
	return true
}

type ThriftTestTestI32Result struct {
	Success *int32 `thrift:"success,0" json:"success,omitempty"`
}

func NewThriftTestTestI32Result() *ThriftTestTestI32Result {
	return &ThriftTestTestI32Result{}
}

var ThriftTestTestI32Result_Success_DEFAULT int32

func (p *ThriftTestTestI32Result) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return ThriftTestTestI32Result_Success_DEFAULT
	}
	return *p.Success
}
func (p *ThriftTestTestI32Result) SetSuccess(x interface{}) {
	p.Success = x.(*int32)
}

var fieldIDToName_ThriftTestTestI32Result = map[int16]string{
	0: "success",
}

func (p *ThriftTestTestI32Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestI32Result) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestI32Result[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestI32Result) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ThriftTestTestI32Result) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testI32_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestI32Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Success); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ThriftTestTestI32Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestI32Result(%+v)", *p)
}

func (p *ThriftTestTestI32Result) DeepEqual(ano *ThriftTestTestI32Result) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ThriftTestTestI32Result) Field0DeepEqual(src *int32) bool {

	if p.Success == src {
		return true
	} else if p.Success == nil || src == nil {
		return false
	}
	if *p.Success != *src {
		return false
	}
	return true
}

type ThriftTestTestI64Args struct {
	Thing int64 `thrift:"thing,1" json:"thing"`
}

func NewThriftTestTestI64Args() *ThriftTestTestI64Args {
	return &ThriftTestTestI64Args{}
}

func (p *ThriftTestTestI64Args) GetThing() int64 {
	return p.Thing
}
func (p *ThriftTestTestI64Args) SetThing(val int64) {
	p.Thing = val
}

var fieldIDToName_ThriftTestTestI64Args = map[int16]string{
	1: "thing",
}

func (p *ThriftTestTestI64Args) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestI64Args[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestI64Args) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Thing = v
	}
	return nil
}

func (p *ThriftTestTestI64Args) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testI64_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestI64Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("thing", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Thing); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ThriftTestTestI64Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestI64Args(%+v)", *p)
}

func (p *ThriftTestTestI64Args) DeepEqual(ano *ThriftTestTestI64Args) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Thing) {
		return false
	}
	return true
}

func (p *ThriftTestTestI64Args) Field1DeepEqual(src int64) bool {

	if p.Thing != src {
		return false
	}
	return true
}

type ThriftTestTestI64Result struct {
	Success *int64 `thrift:"success,0" json:"success,omitempty"`
}

func NewThriftTestTestI64Result() *ThriftTestTestI64Result {
	return &ThriftTestTestI64Result{}
}

var ThriftTestTestI64Result_Success_DEFAULT int64

func (p *ThriftTestTestI64Result) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return ThriftTestTestI64Result_Success_DEFAULT
	}
	return *p.Success
}
func (p *ThriftTestTestI64Result) SetSuccess(x interface{}) {
	p.Success = x.(*int64)
}

var fieldIDToName_ThriftTestTestI64Result = map[int16]string{
	0: "success",
}

func (p *ThriftTestTestI64Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestI64Result) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestI64Result[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestI64Result) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ThriftTestTestI64Result) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testI64_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestI64Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Success); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ThriftTestTestI64Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestI64Result(%+v)", *p)
}

func (p *ThriftTestTestI64Result) DeepEqual(ano *ThriftTestTestI64Result) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ThriftTestTestI64Result) Field0DeepEqual(src *int64) bool {

	if p.Success == src {
		return true
	} else if p.Success == nil || src == nil {
		return false
	}
	if *p.Success != *src {
		return false
	}
	return true
}

type ThriftTestTestDoubleArgs struct {
	Thing float64 `thrift:"thing,1" json:"thing"`
}

func NewThriftTestTestDoubleArgs() *ThriftTestTestDoubleArgs {
	return &ThriftTestTestDoubleArgs{}
}

func (p *ThriftTestTestDoubleArgs) GetThing() float64 {
	return p.Thing
}
func (p *ThriftTestTestDoubleArgs) SetThing(val float64) {
	p.Thing = val
}

var fieldIDToName_ThriftTestTestDoubleArgs = map[int16]string{
	1: "thing",
}

func (p *ThriftTestTestDoubleArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestDoubleArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestDoubleArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.Thing = v
	}
	return nil
}

func (p *ThriftTestTestDoubleArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testDouble_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestDoubleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("thing", thrift.DOUBLE, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.Thing); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ThriftTestTestDoubleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestDoubleArgs(%+v)", *p)
}

func (p *ThriftTestTestDoubleArgs) DeepEqual(ano *ThriftTestTestDoubleArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Thing) {
		return false
	}
	return true
}

func (p *ThriftTestTestDoubleArgs) Field1DeepEqual(src float64) bool {

	if p.Thing != src {
		return false
	}
	return true
}

type ThriftTestTestDoubleResult struct {
	Success *float64 `thrift:"success,0" json:"success,omitempty"`
}

func NewThriftTestTestDoubleResult() *ThriftTestTestDoubleResult {
	return &ThriftTestTestDoubleResult{}
}

var ThriftTestTestDoubleResult_Success_DEFAULT float64

func (p *ThriftTestTestDoubleResult) GetSuccess() float64 {
	if !p.IsSetSuccess() {
		return ThriftTestTestDoubleResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ThriftTestTestDoubleResult) SetSuccess(x interface{}) {
	p.Success = x.(*float64)
}

var fieldIDToName_ThriftTestTestDoubleResult = map[int16]string{
	0: "success",
}

func (p *ThriftTestTestDoubleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestDoubleResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestDoubleResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestDoubleResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ThriftTestTestDoubleResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testDouble_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestDoubleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.DOUBLE, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.Success); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ThriftTestTestDoubleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestDoubleResult(%+v)", *p)
}

func (p *ThriftTestTestDoubleResult) DeepEqual(ano *ThriftTestTestDoubleResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ThriftTestTestDoubleResult) Field0DeepEqual(src *float64) bool {

	if p.Success == src {
		return true
	} else if p.Success == nil || src == nil {
		return false
	}
	if *p.Success != *src {
		return false
	}
	return true
}

type ThriftTestTestBinaryArgs struct {
	Thing []byte `thrift:"thing,1" json:"thing"`
}

func NewThriftTestTestBinaryArgs() *ThriftTestTestBinaryArgs {
	return &ThriftTestTestBinaryArgs{}
}

func (p *ThriftTestTestBinaryArgs) GetThing() []byte {
	return p.Thing
}
func (p *ThriftTestTestBinaryArgs) SetThing(val []byte) {
	p.Thing = val
}

var fieldIDToName_ThriftTestTestBinaryArgs = map[int16]string{
	1: "thing",
}

func (p *ThriftTestTestBinaryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestBinaryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestBinaryArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		p.Thing = []byte(v)
	}
	return nil
}

func (p *ThriftTestTestBinaryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testBinary_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestBinaryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("thing", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.Thing)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ThriftTestTestBinaryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestBinaryArgs(%+v)", *p)
}

func (p *ThriftTestTestBinaryArgs) DeepEqual(ano *ThriftTestTestBinaryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Thing) {
		return false
	}
	return true
}

func (p *ThriftTestTestBinaryArgs) Field1DeepEqual(src []byte) bool {

	if bytes.Compare(p.Thing, src) != 0 {
		return false
	}
	return true
}

type ThriftTestTestBinaryResult struct {
	Success []byte `thrift:"success,0" json:"success,omitempty"`
}

func NewThriftTestTestBinaryResult() *ThriftTestTestBinaryResult {
	return &ThriftTestTestBinaryResult{}
}

var ThriftTestTestBinaryResult_Success_DEFAULT []byte

func (p *ThriftTestTestBinaryResult) GetSuccess() []byte {
	if !p.IsSetSuccess() {
		return ThriftTestTestBinaryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ThriftTestTestBinaryResult) SetSuccess(x interface{}) {
	p.Success = x.([]byte)
}

var fieldIDToName_ThriftTestTestBinaryResult = map[int16]string{
	0: "success",
}

func (p *ThriftTestTestBinaryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestBinaryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestBinaryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestBinaryResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		p.Success = []byte(v)
	}
	return nil
}

func (p *ThriftTestTestBinaryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testBinary_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestBinaryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBinary([]byte(p.Success)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ThriftTestTestBinaryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestBinaryResult(%+v)", *p)
}

func (p *ThriftTestTestBinaryResult) DeepEqual(ano *ThriftTestTestBinaryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ThriftTestTestBinaryResult) Field0DeepEqual(src []byte) bool {

	if bytes.Compare(p.Success, src) != 0 {
		return false
	}
	return true
}

type ThriftTestTestStructArgs struct {
	Thing *Xtruct `thrift:"thing,1" json:"thing"`
}

func NewThriftTestTestStructArgs() *ThriftTestTestStructArgs {
	return &ThriftTestTestStructArgs{}
}

var ThriftTestTestStructArgs_Thing_DEFAULT *Xtruct

func (p *ThriftTestTestStructArgs) GetThing() *Xtruct {
	if !p.IsSetThing() {
		return ThriftTestTestStructArgs_Thing_DEFAULT
	}
	return p.Thing
}
func (p *ThriftTestTestStructArgs) SetThing(val *Xtruct) {
	p.Thing = val
}

var fieldIDToName_ThriftTestTestStructArgs = map[int16]string{
	1: "thing",
}

func (p *ThriftTestTestStructArgs) IsSetThing() bool {
	return p.Thing != nil
}

func (p *ThriftTestTestStructArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestStructArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestStructArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Thing = NewXtruct()
	if err := p.Thing.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ThriftTestTestStructArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testStruct_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestStructArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("thing", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Thing.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ThriftTestTestStructArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestStructArgs(%+v)", *p)
}

func (p *ThriftTestTestStructArgs) DeepEqual(ano *ThriftTestTestStructArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Thing) {
		return false
	}
	return true
}

func (p *ThriftTestTestStructArgs) Field1DeepEqual(src *Xtruct) bool {

	if !p.Thing.DeepEqual(src) {
		return false
	}
	return true
}

type ThriftTestTestStructResult struct {
	Success *Xtruct `thrift:"success,0" json:"success,omitempty"`
}

func NewThriftTestTestStructResult() *ThriftTestTestStructResult {
	return &ThriftTestTestStructResult{}
}

var ThriftTestTestStructResult_Success_DEFAULT *Xtruct

func (p *ThriftTestTestStructResult) GetSuccess() *Xtruct {
	if !p.IsSetSuccess() {
		return ThriftTestTestStructResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ThriftTestTestStructResult) SetSuccess(x interface{}) {
	p.Success = x.(*Xtruct)
}

var fieldIDToName_ThriftTestTestStructResult = map[int16]string{
	0: "success",
}

func (p *ThriftTestTestStructResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestStructResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestStructResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestStructResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewXtruct()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ThriftTestTestStructResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testStruct_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestStructResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ThriftTestTestStructResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestStructResult(%+v)", *p)
}

func (p *ThriftTestTestStructResult) DeepEqual(ano *ThriftTestTestStructResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ThriftTestTestStructResult) Field0DeepEqual(src *Xtruct) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ThriftTestTestNestArgs struct {
	Thing *Xtruct2 `thrift:"thing,1" json:"thing"`
}

func NewThriftTestTestNestArgs() *ThriftTestTestNestArgs {
	return &ThriftTestTestNestArgs{}
}

var ThriftTestTestNestArgs_Thing_DEFAULT *Xtruct2

func (p *ThriftTestTestNestArgs) GetThing() *Xtruct2 {
	if !p.IsSetThing() {
		return ThriftTestTestNestArgs_Thing_DEFAULT
	}
	return p.Thing
}
func (p *ThriftTestTestNestArgs) SetThing(val *Xtruct2) {
	p.Thing = val
}

var fieldIDToName_ThriftTestTestNestArgs = map[int16]string{
	1: "thing",
}

func (p *ThriftTestTestNestArgs) IsSetThing() bool {
	return p.Thing != nil
}

func (p *ThriftTestTestNestArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestNestArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestNestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Thing = NewXtruct2()
	if err := p.Thing.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ThriftTestTestNestArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testNest_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestNestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("thing", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Thing.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ThriftTestTestNestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestNestArgs(%+v)", *p)
}

func (p *ThriftTestTestNestArgs) DeepEqual(ano *ThriftTestTestNestArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Thing) {
		return false
	}
	return true
}

func (p *ThriftTestTestNestArgs) Field1DeepEqual(src *Xtruct2) bool {

	if !p.Thing.DeepEqual(src) {
		return false
	}
	return true
}

type ThriftTestTestNestResult struct {
	Success *Xtruct2 `thrift:"success,0" json:"success,omitempty"`
}

func NewThriftTestTestNestResult() *ThriftTestTestNestResult {
	return &ThriftTestTestNestResult{}
}

var ThriftTestTestNestResult_Success_DEFAULT *Xtruct2

func (p *ThriftTestTestNestResult) GetSuccess() *Xtruct2 {
	if !p.IsSetSuccess() {
		return ThriftTestTestNestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ThriftTestTestNestResult) SetSuccess(x interface{}) {
	p.Success = x.(*Xtruct2)
}

var fieldIDToName_ThriftTestTestNestResult = map[int16]string{
	0: "success",
}

func (p *ThriftTestTestNestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestNestResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestNestResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestNestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewXtruct2()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ThriftTestTestNestResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testNest_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestNestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ThriftTestTestNestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestNestResult(%+v)", *p)
}

func (p *ThriftTestTestNestResult) DeepEqual(ano *ThriftTestTestNestResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ThriftTestTestNestResult) Field0DeepEqual(src *Xtruct2) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ThriftTestTestMapArgs struct {
	Thing map[int32]int32 `thrift:"thing,1" json:"thing"`
}

func NewThriftTestTestMapArgs() *ThriftTestTestMapArgs {
	return &ThriftTestTestMapArgs{}
}

func (p *ThriftTestTestMapArgs) GetThing() map[int32]int32 {
	return p.Thing
}
func (p *ThriftTestTestMapArgs) SetThing(val map[int32]int32) {
	p.Thing = val
}

var fieldIDToName_ThriftTestTestMapArgs = map[int16]string{
	1: "thing",
}

func (p *ThriftTestTestMapArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestMapArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestMapArgs) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Thing = make(map[int32]int32, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_val = v
		}

		p.Thing[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ThriftTestTestMapArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testMap_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestMapArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("thing", thrift.MAP, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.I32, len(p.Thing)); err != nil {
		return err
	}
	for k, v := range p.Thing {

		if err := oprot.WriteI32(k); err != nil {
			return err
		}

		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ThriftTestTestMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestMapArgs(%+v)", *p)
}

func (p *ThriftTestTestMapArgs) DeepEqual(ano *ThriftTestTestMapArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Thing) {
		return false
	}
	return true
}

func (p *ThriftTestTestMapArgs) Field1DeepEqual(src map[int32]int32) bool {

	if len(p.Thing) != len(src) {
		return false
	}
	for k, v := range p.Thing {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}

type ThriftTestTestMapResult struct {
	Success map[int32]int32 `thrift:"success,0" json:"success,omitempty"`
}

func NewThriftTestTestMapResult() *ThriftTestTestMapResult {
	return &ThriftTestTestMapResult{}
}

var ThriftTestTestMapResult_Success_DEFAULT map[int32]int32

func (p *ThriftTestTestMapResult) GetSuccess() map[int32]int32 {
	if !p.IsSetSuccess() {
		return ThriftTestTestMapResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ThriftTestTestMapResult) SetSuccess(x interface{}) {
	p.Success = x.(map[int32]int32)
}

var fieldIDToName_ThriftTestTestMapResult = map[int16]string{
	0: "success",
}

func (p *ThriftTestTestMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestMapResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestMapResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestMapResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Success = make(map[int32]int32, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_val = v
		}

		p.Success[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ThriftTestTestMapResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testMap_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestMapResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.I32, len(p.Success)); err != nil {
			return err
		}
		for k, v := range p.Success {

			if err := oprot.WriteI32(k); err != nil {
				return err
			}

			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ThriftTestTestMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestMapResult(%+v)", *p)
}

func (p *ThriftTestTestMapResult) DeepEqual(ano *ThriftTestTestMapResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ThriftTestTestMapResult) Field0DeepEqual(src map[int32]int32) bool {

	if len(p.Success) != len(src) {
		return false
	}
	for k, v := range p.Success {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}

type ThriftTestTestStringMapArgs struct {
	Thing map[string]string `thrift:"thing,1" json:"thing"`
}

func NewThriftTestTestStringMapArgs() *ThriftTestTestStringMapArgs {
	return &ThriftTestTestStringMapArgs{}
}

func (p *ThriftTestTestStringMapArgs) GetThing() map[string]string {
	return p.Thing
}
func (p *ThriftTestTestStringMapArgs) SetThing(val map[string]string) {
	p.Thing = val
}

var fieldIDToName_ThriftTestTestStringMapArgs = map[int16]string{
	1: "thing",
}

func (p *ThriftTestTestStringMapArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestStringMapArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestStringMapArgs) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Thing = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		p.Thing[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ThriftTestTestStringMapArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testStringMap_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestStringMapArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("thing", thrift.MAP, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Thing)); err != nil {
		return err
	}
	for k, v := range p.Thing {

		if err := oprot.WriteString(k); err != nil {
			return err
		}

		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ThriftTestTestStringMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestStringMapArgs(%+v)", *p)
}

func (p *ThriftTestTestStringMapArgs) DeepEqual(ano *ThriftTestTestStringMapArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Thing) {
		return false
	}
	return true
}

func (p *ThriftTestTestStringMapArgs) Field1DeepEqual(src map[string]string) bool {

	if len(p.Thing) != len(src) {
		return false
	}
	for k, v := range p.Thing {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type ThriftTestTestStringMapResult struct {
	Success map[string]string `thrift:"success,0" json:"success,omitempty"`
}

func NewThriftTestTestStringMapResult() *ThriftTestTestStringMapResult {
	return &ThriftTestTestStringMapResult{}
}

var ThriftTestTestStringMapResult_Success_DEFAULT map[string]string

func (p *ThriftTestTestStringMapResult) GetSuccess() map[string]string {
	if !p.IsSetSuccess() {
		return ThriftTestTestStringMapResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ThriftTestTestStringMapResult) SetSuccess(x interface{}) {
	p.Success = x.(map[string]string)
}

var fieldIDToName_ThriftTestTestStringMapResult = map[int16]string{
	0: "success",
}

func (p *ThriftTestTestStringMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestStringMapResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestStringMapResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestStringMapResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Success = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		p.Success[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ThriftTestTestStringMapResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testStringMap_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestStringMapResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
			return err
		}
		for k, v := range p.Success {

			if err := oprot.WriteString(k); err != nil {
				return err
			}

			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ThriftTestTestStringMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestStringMapResult(%+v)", *p)
}

func (p *ThriftTestTestStringMapResult) DeepEqual(ano *ThriftTestTestStringMapResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ThriftTestTestStringMapResult) Field0DeepEqual(src map[string]string) bool {

	if len(p.Success) != len(src) {
		return false
	}
	for k, v := range p.Success {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type ThriftTestTestSetArgs struct {
	Thing []int32 `thrift:"thing,1" json:"thing"`
}

func NewThriftTestTestSetArgs() *ThriftTestTestSetArgs {
	return &ThriftTestTestSetArgs{}
}

func (p *ThriftTestTestSetArgs) GetThing() []int32 {
	return p.Thing
}
func (p *ThriftTestTestSetArgs) SetThing(val []int32) {
	p.Thing = val
}

var fieldIDToName_ThriftTestTestSetArgs = map[int16]string{
	1: "thing",
}

func (p *ThriftTestTestSetArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.SET {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestSetArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestSetArgs) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return err
	}
	p.Thing = make([]int32, 0, size)
	for i := 0; i < size; i++ {
		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Thing = append(p.Thing, _elem)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ThriftTestTestSetArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testSet_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestSetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("thing", thrift.SET, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteSetBegin(thrift.I32, len(p.Thing)); err != nil {
		return err
	}
	for i := 0; i < len(p.Thing); i++ {
		for j := i + 1; j < len(p.Thing); j++ {
			if func(tgt, src int32) bool {
				if tgt != src {
					return false
				}
				return true
			}(p.Thing[i], p.Thing[j]) {
				return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Thing[i]))
			}
		}
	}
	for _, v := range p.Thing {
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ThriftTestTestSetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestSetArgs(%+v)", *p)
}

func (p *ThriftTestTestSetArgs) DeepEqual(ano *ThriftTestTestSetArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Thing) {
		return false
	}
	return true
}

func (p *ThriftTestTestSetArgs) Field1DeepEqual(src []int32) bool {

	if len(p.Thing) != len(src) {
		return false
	}
	for i, v := range p.Thing {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type ThriftTestTestSetResult struct {
	Success []int32 `thrift:"success,0" json:"success,omitempty"`
}

func NewThriftTestTestSetResult() *ThriftTestTestSetResult {
	return &ThriftTestTestSetResult{}
}

var ThriftTestTestSetResult_Success_DEFAULT []int32

func (p *ThriftTestTestSetResult) GetSuccess() []int32 {
	if !p.IsSetSuccess() {
		return ThriftTestTestSetResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ThriftTestTestSetResult) SetSuccess(x interface{}) {
	p.Success = x.([]int32)
}

var fieldIDToName_ThriftTestTestSetResult = map[int16]string{
	0: "success",
}

func (p *ThriftTestTestSetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestSetResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.SET {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestSetResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestSetResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return err
	}
	p.Success = make([]int32, 0, size)
	for i := 0; i < size; i++ {
		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Success = append(p.Success, _elem)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ThriftTestTestSetResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testSet_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestSetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.SET, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteSetBegin(thrift.I32, len(p.Success)); err != nil {
			return err
		}
		for i := 0; i < len(p.Success); i++ {
			for j := i + 1; j < len(p.Success); j++ {
				if func(tgt, src int32) bool {
					if tgt != src {
						return false
					}
					return true
				}(p.Success[i], p.Success[j]) {
					return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Success[i]))
				}
			}
		}
		for _, v := range p.Success {
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ThriftTestTestSetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestSetResult(%+v)", *p)
}

func (p *ThriftTestTestSetResult) DeepEqual(ano *ThriftTestTestSetResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ThriftTestTestSetResult) Field0DeepEqual(src []int32) bool {

	if len(p.Success) != len(src) {
		return false
	}
	for i, v := range p.Success {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type ThriftTestTestListArgs struct {
	Thing []int32 `thrift:"thing,1" json:"thing"`
}

func NewThriftTestTestListArgs() *ThriftTestTestListArgs {
	return &ThriftTestTestListArgs{}
}

func (p *ThriftTestTestListArgs) GetThing() []int32 {
	return p.Thing
}
func (p *ThriftTestTestListArgs) SetThing(val []int32) {
	p.Thing = val
}

var fieldIDToName_ThriftTestTestListArgs = map[int16]string{
	1: "thing",
}

func (p *ThriftTestTestListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestListArgs) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Thing = make([]int32, 0, size)
	for i := 0; i < size; i++ {
		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Thing = append(p.Thing, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ThriftTestTestListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("thing", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.Thing)); err != nil {
		return err
	}
	for _, v := range p.Thing {
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ThriftTestTestListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestListArgs(%+v)", *p)
}

func (p *ThriftTestTestListArgs) DeepEqual(ano *ThriftTestTestListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Thing) {
		return false
	}
	return true
}

func (p *ThriftTestTestListArgs) Field1DeepEqual(src []int32) bool {

	if len(p.Thing) != len(src) {
		return false
	}
	for i, v := range p.Thing {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type ThriftTestTestListResult struct {
	Success []int32 `thrift:"success,0" json:"success,omitempty"`
}

func NewThriftTestTestListResult() *ThriftTestTestListResult {
	return &ThriftTestTestListResult{}
}

var ThriftTestTestListResult_Success_DEFAULT []int32

func (p *ThriftTestTestListResult) GetSuccess() []int32 {
	if !p.IsSetSuccess() {
		return ThriftTestTestListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ThriftTestTestListResult) SetSuccess(x interface{}) {
	p.Success = x.([]int32)
}

var fieldIDToName_ThriftTestTestListResult = map[int16]string{
	0: "success",
}

func (p *ThriftTestTestListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestListResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Success = make([]int32, 0, size)
	for i := 0; i < size; i++ {
		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Success = append(p.Success, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ThriftTestTestListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.Success)); err != nil {
			return err
		}
		for _, v := range p.Success {
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ThriftTestTestListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestListResult(%+v)", *p)
}

func (p *ThriftTestTestListResult) DeepEqual(ano *ThriftTestTestListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ThriftTestTestListResult) Field0DeepEqual(src []int32) bool {

	if len(p.Success) != len(src) {
		return false
	}
	for i, v := range p.Success {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type ThriftTestTestEnumArgs struct {
	Thing Numberz `thrift:"thing,1" json:"thing"`
}

func NewThriftTestTestEnumArgs() *ThriftTestTestEnumArgs {
	return &ThriftTestTestEnumArgs{}
}

func (p *ThriftTestTestEnumArgs) GetThing() Numberz {
	return p.Thing
}
func (p *ThriftTestTestEnumArgs) SetThing(val Numberz) {
	p.Thing = val
}

var fieldIDToName_ThriftTestTestEnumArgs = map[int16]string{
	1: "thing",
}

func (p *ThriftTestTestEnumArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestEnumArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestEnumArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Thing = Numberz(v)
	}
	return nil
}

func (p *ThriftTestTestEnumArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testEnum_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestEnumArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("thing", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Thing)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ThriftTestTestEnumArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestEnumArgs(%+v)", *p)
}

func (p *ThriftTestTestEnumArgs) DeepEqual(ano *ThriftTestTestEnumArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Thing) {
		return false
	}
	return true
}

func (p *ThriftTestTestEnumArgs) Field1DeepEqual(src Numberz) bool {

	if p.Thing != src {
		return false
	}
	return true
}

type ThriftTestTestEnumResult struct {
	Success *Numberz `thrift:"success,0" json:"success,omitempty"`
}

func NewThriftTestTestEnumResult() *ThriftTestTestEnumResult {
	return &ThriftTestTestEnumResult{}
}

var ThriftTestTestEnumResult_Success_DEFAULT Numberz

func (p *ThriftTestTestEnumResult) GetSuccess() Numberz {
	if !p.IsSetSuccess() {
		return ThriftTestTestEnumResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ThriftTestTestEnumResult) SetSuccess(x interface{}) {
	p.Success = x.(*Numberz)
}

var fieldIDToName_ThriftTestTestEnumResult = map[int16]string{
	0: "success",
}

func (p *ThriftTestTestEnumResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestEnumResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestEnumResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestEnumResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := Numberz(v)
		p.Success = &tmp
	}
	return nil
}

func (p *ThriftTestTestEnumResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testEnum_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestEnumResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ThriftTestTestEnumResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestEnumResult(%+v)", *p)
}

func (p *ThriftTestTestEnumResult) DeepEqual(ano *ThriftTestTestEnumResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ThriftTestTestEnumResult) Field0DeepEqual(src *Numberz) bool {

	if p.Success == src {
		return true
	} else if p.Success == nil || src == nil {
		return false
	}
	if *p.Success != *src {
		return false
	}
	return true
}

type ThriftTestTestTypedefArgs struct {
	Thing UserId `thrift:"thing,1" json:"thing"`
}

func NewThriftTestTestTypedefArgs() *ThriftTestTestTypedefArgs {
	return &ThriftTestTestTypedefArgs{}
}

func (p *ThriftTestTestTypedefArgs) GetThing() UserId {
	return p.Thing
}
func (p *ThriftTestTestTypedefArgs) SetThing(val UserId) {
	p.Thing = val
}

var fieldIDToName_ThriftTestTestTypedefArgs = map[int16]string{
	1: "thing",
}

func (p *ThriftTestTestTypedefArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestTypedefArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestTypedefArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Thing = v
	}
	return nil
}

func (p *ThriftTestTestTypedefArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testTypedef_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestTypedefArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("thing", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Thing); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ThriftTestTestTypedefArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestTypedefArgs(%+v)", *p)
}

func (p *ThriftTestTestTypedefArgs) DeepEqual(ano *ThriftTestTestTypedefArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Thing) {
		return false
	}
	return true
}

func (p *ThriftTestTestTypedefArgs) Field1DeepEqual(src UserId) bool {

	if p.Thing != src {
		return false
	}
	return true
}

type ThriftTestTestTypedefResult struct {
	Success *UserId `thrift:"success,0" json:"success,omitempty"`
}

func NewThriftTestTestTypedefResult() *ThriftTestTestTypedefResult {
	return &ThriftTestTestTypedefResult{}
}

var ThriftTestTestTypedefResult_Success_DEFAULT UserId

func (p *ThriftTestTestTypedefResult) GetSuccess() UserId {
	if !p.IsSetSuccess() {
		return ThriftTestTestTypedefResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ThriftTestTestTypedefResult) SetSuccess(x interface{}) {
	p.Success = x.(*UserId)
}

var fieldIDToName_ThriftTestTestTypedefResult = map[int16]string{
	0: "success",
}

func (p *ThriftTestTestTypedefResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestTypedefResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestTypedefResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestTypedefResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ThriftTestTestTypedefResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testTypedef_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestTypedefResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Success); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ThriftTestTestTypedefResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestTypedefResult(%+v)", *p)
}

func (p *ThriftTestTestTypedefResult) DeepEqual(ano *ThriftTestTestTypedefResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ThriftTestTestTypedefResult) Field0DeepEqual(src *UserId) bool {

	if p.Success == src {
		return true
	} else if p.Success == nil || src == nil {
		return false
	}
	if *p.Success != *src {
		return false
	}
	return true
}

type ThriftTestTestMapMapArgs struct {
	Hello int32 `thrift:"hello,1" json:"hello"`
}

func NewThriftTestTestMapMapArgs() *ThriftTestTestMapMapArgs {
	return &ThriftTestTestMapMapArgs{}
}

func (p *ThriftTestTestMapMapArgs) GetHello() int32 {
	return p.Hello
}
func (p *ThriftTestTestMapMapArgs) SetHello(val int32) {
	p.Hello = val
}

var fieldIDToName_ThriftTestTestMapMapArgs = map[int16]string{
	1: "hello",
}

func (p *ThriftTestTestMapMapArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestMapMapArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestMapMapArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Hello = v
	}
	return nil
}

func (p *ThriftTestTestMapMapArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testMapMap_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestMapMapArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("hello", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Hello); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ThriftTestTestMapMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestMapMapArgs(%+v)", *p)
}

func (p *ThriftTestTestMapMapArgs) DeepEqual(ano *ThriftTestTestMapMapArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Hello) {
		return false
	}
	return true
}

func (p *ThriftTestTestMapMapArgs) Field1DeepEqual(src int32) bool {

	if p.Hello != src {
		return false
	}
	return true
}

type ThriftTestTestMapMapResult struct {
	Success map[int32]map[int32]int32 `thrift:"success,0" json:"success,omitempty"`
}

func NewThriftTestTestMapMapResult() *ThriftTestTestMapMapResult {
	return &ThriftTestTestMapMapResult{}
}

var ThriftTestTestMapMapResult_Success_DEFAULT map[int32]map[int32]int32

func (p *ThriftTestTestMapMapResult) GetSuccess() map[int32]map[int32]int32 {
	if !p.IsSetSuccess() {
		return ThriftTestTestMapMapResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ThriftTestTestMapMapResult) SetSuccess(x interface{}) {
	p.Success = x.(map[int32]map[int32]int32)
}

var fieldIDToName_ThriftTestTestMapMapResult = map[int16]string{
	0: "success",
}

func (p *ThriftTestTestMapMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestMapMapResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestMapMapResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestMapMapResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Success = make(map[int32]map[int32]int32, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return err
		}
		_val := make(map[int32]int32, size)
		for i := 0; i < size; i++ {
			var _key1 int32
			if v, err := iprot.ReadI32(); err != nil {
				return err
			} else {
				_key1 = v
			}

			var _val1 int32
			if v, err := iprot.ReadI32(); err != nil {
				return err
			} else {
				_val1 = v
			}

			_val[_key1] = _val1
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return err
		}

		p.Success[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ThriftTestTestMapMapResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testMapMap_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestMapMapResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.MAP, len(p.Success)); err != nil {
			return err
		}
		for k, v := range p.Success {

			if err := oprot.WriteI32(k); err != nil {
				return err
			}

			if err := oprot.WriteMapBegin(thrift.I32, thrift.I32, len(v)); err != nil {
				return err
			}
			for k, v := range v {

				if err := oprot.WriteI32(k); err != nil {
					return err
				}

				if err := oprot.WriteI32(v); err != nil {
					return err
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ThriftTestTestMapMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestMapMapResult(%+v)", *p)
}

func (p *ThriftTestTestMapMapResult) DeepEqual(ano *ThriftTestTestMapMapResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ThriftTestTestMapMapResult) Field0DeepEqual(src map[int32]map[int32]int32) bool {

	if len(p.Success) != len(src) {
		return false
	}
	for k, v := range p.Success {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for k, v := range v {
			_src1 := _src[k]
			if v != _src1 {
				return false
			}
		}
	}
	return true
}

type ThriftTestTestInsanityArgs struct {
	Argument *Insanity `thrift:"argument,1" json:"argument"`
}

func NewThriftTestTestInsanityArgs() *ThriftTestTestInsanityArgs {
	return &ThriftTestTestInsanityArgs{}
}

var ThriftTestTestInsanityArgs_Argument_DEFAULT *Insanity

func (p *ThriftTestTestInsanityArgs) GetArgument() *Insanity {
	if !p.IsSetArgument() {
		return ThriftTestTestInsanityArgs_Argument_DEFAULT
	}
	return p.Argument
}
func (p *ThriftTestTestInsanityArgs) SetArgument(val *Insanity) {
	p.Argument = val
}

var fieldIDToName_ThriftTestTestInsanityArgs = map[int16]string{
	1: "argument",
}

func (p *ThriftTestTestInsanityArgs) IsSetArgument() bool {
	return p.Argument != nil
}

func (p *ThriftTestTestInsanityArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestInsanityArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestInsanityArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Argument = NewInsanity()
	if err := p.Argument.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ThriftTestTestInsanityArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testInsanity_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestInsanityArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("argument", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Argument.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ThriftTestTestInsanityArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestInsanityArgs(%+v)", *p)
}

func (p *ThriftTestTestInsanityArgs) DeepEqual(ano *ThriftTestTestInsanityArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Argument) {
		return false
	}
	return true
}

func (p *ThriftTestTestInsanityArgs) Field1DeepEqual(src *Insanity) bool {

	if !p.Argument.DeepEqual(src) {
		return false
	}
	return true
}

type ThriftTestTestInsanityResult struct {
	Success map[UserId]map[Numberz]*Insanity `thrift:"success,0" json:"success,omitempty"`
}

func NewThriftTestTestInsanityResult() *ThriftTestTestInsanityResult {
	return &ThriftTestTestInsanityResult{}
}

var ThriftTestTestInsanityResult_Success_DEFAULT map[UserId]map[Numberz]*Insanity

func (p *ThriftTestTestInsanityResult) GetSuccess() map[UserId]map[Numberz]*Insanity {
	if !p.IsSetSuccess() {
		return ThriftTestTestInsanityResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ThriftTestTestInsanityResult) SetSuccess(x interface{}) {
	p.Success = x.(map[UserId]map[Numberz]*Insanity)
}

var fieldIDToName_ThriftTestTestInsanityResult = map[int16]string{
	0: "success",
}

func (p *ThriftTestTestInsanityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestInsanityResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestInsanityResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestInsanityResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Success = make(map[UserId]map[Numberz]*Insanity, size)
	for i := 0; i < size; i++ {
		var _key UserId
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_key = v
		}

		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return err
		}
		_val := make(map[Numberz]*Insanity, size)
		for i := 0; i < size; i++ {
			var _key1 Numberz
			if v, err := iprot.ReadI32(); err != nil {
				return err
			} else {
				_key1 = Numberz(v)
			}
			_val1 := NewInsanity()
			if err := _val1.Read(iprot); err != nil {
				return err
			}

			_val[_key1] = _val1
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return err
		}

		p.Success[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ThriftTestTestInsanityResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testInsanity_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestInsanityResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.MAP, len(p.Success)); err != nil {
			return err
		}
		for k, v := range p.Success {

			if err := oprot.WriteI64(k); err != nil {
				return err
			}

			if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(v)); err != nil {
				return err
			}
			for k, v := range v {

				if err := oprot.WriteI32(int32(k)); err != nil {
					return err
				}

				if err := v.Write(oprot); err != nil {
					return err
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ThriftTestTestInsanityResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestInsanityResult(%+v)", *p)
}

func (p *ThriftTestTestInsanityResult) DeepEqual(ano *ThriftTestTestInsanityResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ThriftTestTestInsanityResult) Field0DeepEqual(src map[UserId]map[Numberz]*Insanity) bool {

	if len(p.Success) != len(src) {
		return false
	}
	for k, v := range p.Success {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for k, v := range v {
			_src1 := _src[k]
			if !v.DeepEqual(_src1) {
				return false
			}
		}
	}
	return true
}

type ThriftTestTestMultiArgs struct {
	Arg0 int8             `thrift:"arg0,1" json:"arg0"`
	Arg1 int32            `thrift:"arg1,2" json:"arg1"`
	Arg2 int64            `thrift:"arg2,3" json:"arg2"`
	Arg3 map[int16]string `thrift:"arg3,4" json:"arg3"`
	Arg4 Numberz          `thrift:"arg4,5" json:"arg4"`
	Arg5 UserId           `thrift:"arg5,6" json:"arg5"`
}

func NewThriftTestTestMultiArgs() *ThriftTestTestMultiArgs {
	return &ThriftTestTestMultiArgs{}
}

func (p *ThriftTestTestMultiArgs) GetArg0() int8 {
	return p.Arg0
}

func (p *ThriftTestTestMultiArgs) GetArg1() int32 {
	return p.Arg1
}

func (p *ThriftTestTestMultiArgs) GetArg2() int64 {
	return p.Arg2
}

func (p *ThriftTestTestMultiArgs) GetArg3() map[int16]string {
	return p.Arg3
}

func (p *ThriftTestTestMultiArgs) GetArg4() Numberz {
	return p.Arg4
}

func (p *ThriftTestTestMultiArgs) GetArg5() UserId {
	return p.Arg5
}
func (p *ThriftTestTestMultiArgs) SetArg0(val int8) {
	p.Arg0 = val
}
func (p *ThriftTestTestMultiArgs) SetArg1(val int32) {
	p.Arg1 = val
}
func (p *ThriftTestTestMultiArgs) SetArg2(val int64) {
	p.Arg2 = val
}
func (p *ThriftTestTestMultiArgs) SetArg3(val map[int16]string) {
	p.Arg3 = val
}
func (p *ThriftTestTestMultiArgs) SetArg4(val Numberz) {
	p.Arg4 = val
}
func (p *ThriftTestTestMultiArgs) SetArg5(val UserId) {
	p.Arg5 = val
}

var fieldIDToName_ThriftTestTestMultiArgs = map[int16]string{
	1: "arg0",
	2: "arg1",
	3: "arg2",
	4: "arg3",
	5: "arg4",
	6: "arg5",
}

func (p *ThriftTestTestMultiArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestMultiArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestMultiArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.Arg0 = v
	}
	return nil
}

func (p *ThriftTestTestMultiArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Arg1 = v
	}
	return nil
}

func (p *ThriftTestTestMultiArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Arg2 = v
	}
	return nil
}

func (p *ThriftTestTestMultiArgs) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Arg3 = make(map[int16]string, size)
	for i := 0; i < size; i++ {
		var _key int16
		if v, err := iprot.ReadI16(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		p.Arg3[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ThriftTestTestMultiArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Arg4 = Numberz(v)
	}
	return nil
}

func (p *ThriftTestTestMultiArgs) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Arg5 = v
	}
	return nil
}

func (p *ThriftTestTestMultiArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testMulti_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestMultiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("arg0", thrift.BYTE, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Arg0); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ThriftTestTestMultiArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("arg1", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Arg1); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ThriftTestTestMultiArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("arg2", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Arg2); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ThriftTestTestMultiArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("arg3", thrift.MAP, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I16, thrift.STRING, len(p.Arg3)); err != nil {
		return err
	}
	for k, v := range p.Arg3 {

		if err := oprot.WriteI16(k); err != nil {
			return err
		}

		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ThriftTestTestMultiArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("arg4", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Arg4)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ThriftTestTestMultiArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("arg5", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Arg5); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ThriftTestTestMultiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestMultiArgs(%+v)", *p)
}

func (p *ThriftTestTestMultiArgs) DeepEqual(ano *ThriftTestTestMultiArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Arg0) {
		return false
	}
	if !p.Field2DeepEqual(ano.Arg1) {
		return false
	}
	if !p.Field3DeepEqual(ano.Arg2) {
		return false
	}
	if !p.Field4DeepEqual(ano.Arg3) {
		return false
	}
	if !p.Field5DeepEqual(ano.Arg4) {
		return false
	}
	if !p.Field6DeepEqual(ano.Arg5) {
		return false
	}
	return true
}

func (p *ThriftTestTestMultiArgs) Field1DeepEqual(src int8) bool {

	if p.Arg0 != src {
		return false
	}
	return true
}
func (p *ThriftTestTestMultiArgs) Field2DeepEqual(src int32) bool {

	if p.Arg1 != src {
		return false
	}
	return true
}
func (p *ThriftTestTestMultiArgs) Field3DeepEqual(src int64) bool {

	if p.Arg2 != src {
		return false
	}
	return true
}
func (p *ThriftTestTestMultiArgs) Field4DeepEqual(src map[int16]string) bool {

	if len(p.Arg3) != len(src) {
		return false
	}
	for k, v := range p.Arg3 {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ThriftTestTestMultiArgs) Field5DeepEqual(src Numberz) bool {

	if p.Arg4 != src {
		return false
	}
	return true
}
func (p *ThriftTestTestMultiArgs) Field6DeepEqual(src UserId) bool {

	if p.Arg5 != src {
		return false
	}
	return true
}

type ThriftTestTestMultiResult struct {
	Success *Xtruct `thrift:"success,0" json:"success,omitempty"`
}

func NewThriftTestTestMultiResult() *ThriftTestTestMultiResult {
	return &ThriftTestTestMultiResult{}
}

var ThriftTestTestMultiResult_Success_DEFAULT *Xtruct

func (p *ThriftTestTestMultiResult) GetSuccess() *Xtruct {
	if !p.IsSetSuccess() {
		return ThriftTestTestMultiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ThriftTestTestMultiResult) SetSuccess(x interface{}) {
	p.Success = x.(*Xtruct)
}

var fieldIDToName_ThriftTestTestMultiResult = map[int16]string{
	0: "success",
}

func (p *ThriftTestTestMultiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestMultiResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestMultiResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestMultiResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewXtruct()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ThriftTestTestMultiResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testMulti_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestMultiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ThriftTestTestMultiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestMultiResult(%+v)", *p)
}

func (p *ThriftTestTestMultiResult) DeepEqual(ano *ThriftTestTestMultiResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ThriftTestTestMultiResult) Field0DeepEqual(src *Xtruct) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ThriftTestTestExceptionArgs struct {
	Arg string `thrift:"arg,1" json:"arg"`
}

func NewThriftTestTestExceptionArgs() *ThriftTestTestExceptionArgs {
	return &ThriftTestTestExceptionArgs{}
}

func (p *ThriftTestTestExceptionArgs) GetArg() string {
	return p.Arg
}
func (p *ThriftTestTestExceptionArgs) SetArg(val string) {
	p.Arg = val
}

var fieldIDToName_ThriftTestTestExceptionArgs = map[int16]string{
	1: "arg",
}

func (p *ThriftTestTestExceptionArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestExceptionArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestExceptionArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Arg = v
	}
	return nil
}

func (p *ThriftTestTestExceptionArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testException_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestExceptionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("arg", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Arg); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ThriftTestTestExceptionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestExceptionArgs(%+v)", *p)
}

func (p *ThriftTestTestExceptionArgs) DeepEqual(ano *ThriftTestTestExceptionArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Arg) {
		return false
	}
	return true
}

func (p *ThriftTestTestExceptionArgs) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Arg, src) != 0 {
		return false
	}
	return true
}

type ThriftTestTestExceptionResult struct {
	Err1 *Xception `thrift:"err1,1" json:"err1,omitempty"`
}

func NewThriftTestTestExceptionResult() *ThriftTestTestExceptionResult {
	return &ThriftTestTestExceptionResult{}
}

var ThriftTestTestExceptionResult_Err1_DEFAULT *Xception

func (p *ThriftTestTestExceptionResult) GetErr1() *Xception {
	if !p.IsSetErr1() {
		return ThriftTestTestExceptionResult_Err1_DEFAULT
	}
	return p.Err1
}
func (p *ThriftTestTestExceptionResult) SetErr1(val *Xception) {
	p.Err1 = val
}

var fieldIDToName_ThriftTestTestExceptionResult = map[int16]string{
	1: "err1",
}

func (p *ThriftTestTestExceptionResult) IsSetErr1() bool {
	return p.Err1 != nil
}

func (p *ThriftTestTestExceptionResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestExceptionResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestExceptionResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err1 = NewXception()
	if err := p.Err1.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ThriftTestTestExceptionResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testException_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestExceptionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr1() {
		if err = oprot.WriteFieldBegin("err1", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err1.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ThriftTestTestExceptionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestExceptionResult(%+v)", *p)
}

func (p *ThriftTestTestExceptionResult) DeepEqual(ano *ThriftTestTestExceptionResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Err1) {
		return false
	}
	return true
}

func (p *ThriftTestTestExceptionResult) Field1DeepEqual(src *Xception) bool {

	if !p.Err1.DeepEqual(src) {
		return false
	}
	return true
}

type ThriftTestTestMultiExceptionArgs struct {
	Arg0 string `thrift:"arg0,1" json:"arg0"`
	Arg1 string `thrift:"arg1,2" json:"arg1"`
}

func NewThriftTestTestMultiExceptionArgs() *ThriftTestTestMultiExceptionArgs {
	return &ThriftTestTestMultiExceptionArgs{}
}

func (p *ThriftTestTestMultiExceptionArgs) GetArg0() string {
	return p.Arg0
}

func (p *ThriftTestTestMultiExceptionArgs) GetArg1() string {
	return p.Arg1
}
func (p *ThriftTestTestMultiExceptionArgs) SetArg0(val string) {
	p.Arg0 = val
}
func (p *ThriftTestTestMultiExceptionArgs) SetArg1(val string) {
	p.Arg1 = val
}

var fieldIDToName_ThriftTestTestMultiExceptionArgs = map[int16]string{
	1: "arg0",
	2: "arg1",
}

func (p *ThriftTestTestMultiExceptionArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestMultiExceptionArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestMultiExceptionArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Arg0 = v
	}
	return nil
}

func (p *ThriftTestTestMultiExceptionArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Arg1 = v
	}
	return nil
}

func (p *ThriftTestTestMultiExceptionArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testMultiException_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestMultiExceptionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("arg0", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Arg0); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ThriftTestTestMultiExceptionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("arg1", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Arg1); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ThriftTestTestMultiExceptionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestMultiExceptionArgs(%+v)", *p)
}

func (p *ThriftTestTestMultiExceptionArgs) DeepEqual(ano *ThriftTestTestMultiExceptionArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Arg0) {
		return false
	}
	if !p.Field2DeepEqual(ano.Arg1) {
		return false
	}
	return true
}

func (p *ThriftTestTestMultiExceptionArgs) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Arg0, src) != 0 {
		return false
	}
	return true
}
func (p *ThriftTestTestMultiExceptionArgs) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Arg1, src) != 0 {
		return false
	}
	return true
}

type ThriftTestTestMultiExceptionResult struct {
	Success *Xtruct    `thrift:"success,0" json:"success,omitempty"`
	Err1    *Xception  `thrift:"err1,1" json:"err1,omitempty"`
	Err2    *Xception2 `thrift:"err2,2" json:"err2,omitempty"`
}

func NewThriftTestTestMultiExceptionResult() *ThriftTestTestMultiExceptionResult {
	return &ThriftTestTestMultiExceptionResult{}
}

var ThriftTestTestMultiExceptionResult_Success_DEFAULT *Xtruct

func (p *ThriftTestTestMultiExceptionResult) GetSuccess() *Xtruct {
	if !p.IsSetSuccess() {
		return ThriftTestTestMultiExceptionResult_Success_DEFAULT
	}
	return p.Success
}

var ThriftTestTestMultiExceptionResult_Err1_DEFAULT *Xception

func (p *ThriftTestTestMultiExceptionResult) GetErr1() *Xception {
	if !p.IsSetErr1() {
		return ThriftTestTestMultiExceptionResult_Err1_DEFAULT
	}
	return p.Err1
}

var ThriftTestTestMultiExceptionResult_Err2_DEFAULT *Xception2

func (p *ThriftTestTestMultiExceptionResult) GetErr2() *Xception2 {
	if !p.IsSetErr2() {
		return ThriftTestTestMultiExceptionResult_Err2_DEFAULT
	}
	return p.Err2
}
func (p *ThriftTestTestMultiExceptionResult) SetSuccess(x interface{}) {
	p.Success = x.(*Xtruct)
}
func (p *ThriftTestTestMultiExceptionResult) SetErr1(val *Xception) {
	p.Err1 = val
}
func (p *ThriftTestTestMultiExceptionResult) SetErr2(val *Xception2) {
	p.Err2 = val
}

var fieldIDToName_ThriftTestTestMultiExceptionResult = map[int16]string{
	0: "success",
	1: "err1",
	2: "err2",
}

func (p *ThriftTestTestMultiExceptionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftTestTestMultiExceptionResult) IsSetErr1() bool {
	return p.Err1 != nil
}

func (p *ThriftTestTestMultiExceptionResult) IsSetErr2() bool {
	return p.Err2 != nil
}

func (p *ThriftTestTestMultiExceptionResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestMultiExceptionResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestMultiExceptionResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewXtruct()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ThriftTestTestMultiExceptionResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err1 = NewXception()
	if err := p.Err1.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ThriftTestTestMultiExceptionResult) ReadField2(iprot thrift.TProtocol) error {
	p.Err2 = NewXception2()
	if err := p.Err2.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ThriftTestTestMultiExceptionResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testMultiException_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestMultiExceptionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ThriftTestTestMultiExceptionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr1() {
		if err = oprot.WriteFieldBegin("err1", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err1.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ThriftTestTestMultiExceptionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr2() {
		if err = oprot.WriteFieldBegin("err2", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err2.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ThriftTestTestMultiExceptionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestMultiExceptionResult(%+v)", *p)
}

func (p *ThriftTestTestMultiExceptionResult) DeepEqual(ano *ThriftTestTestMultiExceptionResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err1) {
		return false
	}
	if !p.Field2DeepEqual(ano.Err2) {
		return false
	}
	return true
}

func (p *ThriftTestTestMultiExceptionResult) Field0DeepEqual(src *Xtruct) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ThriftTestTestMultiExceptionResult) Field1DeepEqual(src *Xception) bool {

	if !p.Err1.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ThriftTestTestMultiExceptionResult) Field2DeepEqual(src *Xception2) bool {

	if !p.Err2.DeepEqual(src) {
		return false
	}
	return true
}

type ThriftTestTestOnewayArgs struct {
	SecondsToSleep int32 `thrift:"secondsToSleep,1" json:"secondsToSleep"`
}

func NewThriftTestTestOnewayArgs() *ThriftTestTestOnewayArgs {
	return &ThriftTestTestOnewayArgs{}
}

func (p *ThriftTestTestOnewayArgs) GetSecondsToSleep() int32 {
	return p.SecondsToSleep
}
func (p *ThriftTestTestOnewayArgs) SetSecondsToSleep(val int32) {
	p.SecondsToSleep = val
}

var fieldIDToName_ThriftTestTestOnewayArgs = map[int16]string{
	1: "secondsToSleep",
}

func (p *ThriftTestTestOnewayArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ThriftTestTestOnewayArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ThriftTestTestOnewayArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.SecondsToSleep = v
	}
	return nil
}

func (p *ThriftTestTestOnewayArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testOneway_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ThriftTestTestOnewayArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("secondsToSleep", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.SecondsToSleep); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ThriftTestTestOnewayArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftTestTestOnewayArgs(%+v)", *p)
}

func (p *ThriftTestTestOnewayArgs) DeepEqual(ano *ThriftTestTestOnewayArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SecondsToSleep) {
		return false
	}
	return true
}

func (p *ThriftTestTestOnewayArgs) Field1DeepEqual(src int32) bool {

	if p.SecondsToSleep != src {
		return false
	}
	return true
}

type SecondServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      SecondService
}

func (p *SecondServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *SecondServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *SecondServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewSecondServiceProcessor(handler SecondService) *SecondServiceProcessor {
	self := &SecondServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("secondtestString", &secondServiceProcessorSecondtestString{handler: handler})
	return self
}
func (p *SecondServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type secondServiceProcessorSecondtestString struct {
	handler SecondService
}

func (p *secondServiceProcessorSecondtestString) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SecondServiceSecondtestStringArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("secondtestString", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SecondServiceSecondtestStringResult{}
	var retval string
	if retval, err2 = p.handler.SecondtestString(ctx, args.Thing); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing secondtestString: "+err2.Error())
		oprot.WriteMessageBegin("secondtestString", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("secondtestString", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type SecondServiceSecondtestStringArgs struct {
	Thing string `thrift:"thing,1" json:"thing"`
}

func NewSecondServiceSecondtestStringArgs() *SecondServiceSecondtestStringArgs {
	return &SecondServiceSecondtestStringArgs{}
}

func (p *SecondServiceSecondtestStringArgs) GetThing() string {
	return p.Thing
}
func (p *SecondServiceSecondtestStringArgs) SetThing(val string) {
	p.Thing = val
}

var fieldIDToName_SecondServiceSecondtestStringArgs = map[int16]string{
	1: "thing",
}

func (p *SecondServiceSecondtestStringArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SecondServiceSecondtestStringArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SecondServiceSecondtestStringArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Thing = v
	}
	return nil
}

func (p *SecondServiceSecondtestStringArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("secondtestString_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SecondServiceSecondtestStringArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("thing", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Thing); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SecondServiceSecondtestStringArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SecondServiceSecondtestStringArgs(%+v)", *p)
}

func (p *SecondServiceSecondtestStringArgs) DeepEqual(ano *SecondServiceSecondtestStringArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Thing) {
		return false
	}
	return true
}

func (p *SecondServiceSecondtestStringArgs) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Thing, src) != 0 {
		return false
	}
	return true
}

type SecondServiceSecondtestStringResult struct {
	Success *string `thrift:"success,0" json:"success,omitempty"`
}

func NewSecondServiceSecondtestStringResult() *SecondServiceSecondtestStringResult {
	return &SecondServiceSecondtestStringResult{}
}

var SecondServiceSecondtestStringResult_Success_DEFAULT string

func (p *SecondServiceSecondtestStringResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return SecondServiceSecondtestStringResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *SecondServiceSecondtestStringResult) SetSuccess(x interface{}) {
	p.Success = x.(*string)
}

var fieldIDToName_SecondServiceSecondtestStringResult = map[int16]string{
	0: "success",
}

func (p *SecondServiceSecondtestStringResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SecondServiceSecondtestStringResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SecondServiceSecondtestStringResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SecondServiceSecondtestStringResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Success = &v
	}
	return nil
}

func (p *SecondServiceSecondtestStringResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("secondtestString_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SecondServiceSecondtestStringResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Success); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SecondServiceSecondtestStringResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SecondServiceSecondtestStringResult(%+v)", *p)
}

func (p *SecondServiceSecondtestStringResult) DeepEqual(ano *SecondServiceSecondtestStringResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SecondServiceSecondtestStringResult) Field0DeepEqual(src *string) bool {

	if p.Success == src {
		return true
	} else if p.Success == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Success, *src) != 0 {
		return false
	}
	return true
}
