// Code generated by Kitex v0.0.8. DO NOT EDIT.

package secondservice

import (
	"context"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/output/kitex_gen/thrifttest"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return secondServiceServiceInfo
}

var secondServiceServiceInfo = newServiceInfo()

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "SecondService"
	handlerType := (*thrifttest.SecondService)(nil)
	methods := map[string]kitex.MethodInfo{
		"secondtestString": kitex.NewMethodInfo(secondtestStringHandler, newSecondServiceSecondtestStringArgs, newSecondServiceSecondtestStringResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "thrifttest",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.0.8",
		Extra:           extra,
	}
	return svcInfo
}

func secondtestStringHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*thrifttest.SecondServiceSecondtestStringArgs)
	realResult := result.(*thrifttest.SecondServiceSecondtestStringResult)
	success, err := handler.(thrifttest.SecondService).SecondtestString(ctx, realArg.Thing)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newSecondServiceSecondtestStringArgs() interface{} {
	return thrifttest.NewSecondServiceSecondtestStringArgs()
}

func newSecondServiceSecondtestStringResult() interface{} {
	return thrifttest.NewSecondServiceSecondtestStringResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SecondtestString(ctx context.Context, thing string) (r string, err error) {
	var _args thrifttest.SecondServiceSecondtestStringArgs
	_args.Thing = thing
	var _result thrifttest.SecondServiceSecondtestStringResult
	if err = p.c.Call(ctx, "secondtestString", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
