// Code generated by Kitex v0.0.8. DO NOT EDIT.

package thrifttest

import (
	"context"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/output/kitex_gen/thrifttest"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return thriftTestServiceInfo
}

var thriftTestServiceInfo = newServiceInfo()

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "ThriftTest"
	handlerType := (*thrifttest.ThriftTest)(nil)
	methods := map[string]kitex.MethodInfo{
		"testVoid":           kitex.NewMethodInfo(testVoidHandler, newThriftTestTestVoidArgs, newThriftTestTestVoidResult, false),
		"testString":         kitex.NewMethodInfo(testStringHandler, newThriftTestTestStringArgs, newThriftTestTestStringResult, false),
		"testBool":           kitex.NewMethodInfo(testBoolHandler, newThriftTestTestBoolArgs, newThriftTestTestBoolResult, false),
		"testByte":           kitex.NewMethodInfo(testByteHandler, newThriftTestTestByteArgs, newThriftTestTestByteResult, false),
		"testI32":            kitex.NewMethodInfo(testI32Handler, newThriftTestTestI32Args, newThriftTestTestI32Result, false),
		"testI64":            kitex.NewMethodInfo(testI64Handler, newThriftTestTestI64Args, newThriftTestTestI64Result, false),
		"testDouble":         kitex.NewMethodInfo(testDoubleHandler, newThriftTestTestDoubleArgs, newThriftTestTestDoubleResult, false),
		"testBinary":         kitex.NewMethodInfo(testBinaryHandler, newThriftTestTestBinaryArgs, newThriftTestTestBinaryResult, false),
		"testStruct":         kitex.NewMethodInfo(testStructHandler, newThriftTestTestStructArgs, newThriftTestTestStructResult, false),
		"testNest":           kitex.NewMethodInfo(testNestHandler, newThriftTestTestNestArgs, newThriftTestTestNestResult, false),
		"testMap":            kitex.NewMethodInfo(testMapHandler, newThriftTestTestMapArgs, newThriftTestTestMapResult, false),
		"testStringMap":      kitex.NewMethodInfo(testStringMapHandler, newThriftTestTestStringMapArgs, newThriftTestTestStringMapResult, false),
		"testSet":            kitex.NewMethodInfo(testSetHandler, newThriftTestTestSetArgs, newThriftTestTestSetResult, false),
		"testList":           kitex.NewMethodInfo(testListHandler, newThriftTestTestListArgs, newThriftTestTestListResult, false),
		"testEnum":           kitex.NewMethodInfo(testEnumHandler, newThriftTestTestEnumArgs, newThriftTestTestEnumResult, false),
		"testTypedef":        kitex.NewMethodInfo(testTypedefHandler, newThriftTestTestTypedefArgs, newThriftTestTestTypedefResult, false),
		"testMapMap":         kitex.NewMethodInfo(testMapMapHandler, newThriftTestTestMapMapArgs, newThriftTestTestMapMapResult, false),
		"testInsanity":       kitex.NewMethodInfo(testInsanityHandler, newThriftTestTestInsanityArgs, newThriftTestTestInsanityResult, false),
		"testMulti":          kitex.NewMethodInfo(testMultiHandler, newThriftTestTestMultiArgs, newThriftTestTestMultiResult, false),
		"testException":      kitex.NewMethodInfo(testExceptionHandler, newThriftTestTestExceptionArgs, newThriftTestTestExceptionResult, false),
		"testMultiException": kitex.NewMethodInfo(testMultiExceptionHandler, newThriftTestTestMultiExceptionArgs, newThriftTestTestMultiExceptionResult, false),
		"testOneway":         kitex.NewMethodInfo(testOnewayHandler, newThriftTestTestOnewayArgs, nil, true),
	}
	extra := map[string]interface{}{
		"PackageName": "thrifttest",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.0.8",
		Extra:           extra,
	}
	return svcInfo
}

func testVoidHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	err := handler.(thrifttest.ThriftTest).TestVoid(ctx)
	if err != nil {
		return err
	}

	return nil
}
func newThriftTestTestVoidArgs() interface{} {
	return thrifttest.NewThriftTestTestVoidArgs()
}

func newThriftTestTestVoidResult() interface{} {
	return thrifttest.NewThriftTestTestVoidResult()
}

func testStringHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*thrifttest.ThriftTestTestStringArgs)
	realResult := result.(*thrifttest.ThriftTestTestStringResult)
	success, err := handler.(thrifttest.ThriftTest).TestString(ctx, realArg.Thing)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newThriftTestTestStringArgs() interface{} {
	return thrifttest.NewThriftTestTestStringArgs()
}

func newThriftTestTestStringResult() interface{} {
	return thrifttest.NewThriftTestTestStringResult()
}

func testBoolHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*thrifttest.ThriftTestTestBoolArgs)
	realResult := result.(*thrifttest.ThriftTestTestBoolResult)
	success, err := handler.(thrifttest.ThriftTest).TestBool(ctx, realArg.Thing)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newThriftTestTestBoolArgs() interface{} {
	return thrifttest.NewThriftTestTestBoolArgs()
}

func newThriftTestTestBoolResult() interface{} {
	return thrifttest.NewThriftTestTestBoolResult()
}

func testByteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*thrifttest.ThriftTestTestByteArgs)
	realResult := result.(*thrifttest.ThriftTestTestByteResult)
	success, err := handler.(thrifttest.ThriftTest).TestByte(ctx, realArg.Thing)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newThriftTestTestByteArgs() interface{} {
	return thrifttest.NewThriftTestTestByteArgs()
}

func newThriftTestTestByteResult() interface{} {
	return thrifttest.NewThriftTestTestByteResult()
}

func testI32Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*thrifttest.ThriftTestTestI32Args)
	realResult := result.(*thrifttest.ThriftTestTestI32Result)
	success, err := handler.(thrifttest.ThriftTest).TestI32(ctx, realArg.Thing)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newThriftTestTestI32Args() interface{} {
	return thrifttest.NewThriftTestTestI32Args()
}

func newThriftTestTestI32Result() interface{} {
	return thrifttest.NewThriftTestTestI32Result()
}

func testI64Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*thrifttest.ThriftTestTestI64Args)
	realResult := result.(*thrifttest.ThriftTestTestI64Result)
	success, err := handler.(thrifttest.ThriftTest).TestI64(ctx, realArg.Thing)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newThriftTestTestI64Args() interface{} {
	return thrifttest.NewThriftTestTestI64Args()
}

func newThriftTestTestI64Result() interface{} {
	return thrifttest.NewThriftTestTestI64Result()
}

func testDoubleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*thrifttest.ThriftTestTestDoubleArgs)
	realResult := result.(*thrifttest.ThriftTestTestDoubleResult)
	success, err := handler.(thrifttest.ThriftTest).TestDouble(ctx, realArg.Thing)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newThriftTestTestDoubleArgs() interface{} {
	return thrifttest.NewThriftTestTestDoubleArgs()
}

func newThriftTestTestDoubleResult() interface{} {
	return thrifttest.NewThriftTestTestDoubleResult()
}

func testBinaryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*thrifttest.ThriftTestTestBinaryArgs)
	realResult := result.(*thrifttest.ThriftTestTestBinaryResult)
	success, err := handler.(thrifttest.ThriftTest).TestBinary(ctx, realArg.Thing)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newThriftTestTestBinaryArgs() interface{} {
	return thrifttest.NewThriftTestTestBinaryArgs()
}

func newThriftTestTestBinaryResult() interface{} {
	return thrifttest.NewThriftTestTestBinaryResult()
}

func testStructHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*thrifttest.ThriftTestTestStructArgs)
	realResult := result.(*thrifttest.ThriftTestTestStructResult)
	success, err := handler.(thrifttest.ThriftTest).TestStruct(ctx, realArg.Thing)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newThriftTestTestStructArgs() interface{} {
	return thrifttest.NewThriftTestTestStructArgs()
}

func newThriftTestTestStructResult() interface{} {
	return thrifttest.NewThriftTestTestStructResult()
}

func testNestHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*thrifttest.ThriftTestTestNestArgs)
	realResult := result.(*thrifttest.ThriftTestTestNestResult)
	success, err := handler.(thrifttest.ThriftTest).TestNest(ctx, realArg.Thing)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newThriftTestTestNestArgs() interface{} {
	return thrifttest.NewThriftTestTestNestArgs()
}

func newThriftTestTestNestResult() interface{} {
	return thrifttest.NewThriftTestTestNestResult()
}

func testMapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*thrifttest.ThriftTestTestMapArgs)
	realResult := result.(*thrifttest.ThriftTestTestMapResult)
	success, err := handler.(thrifttest.ThriftTest).TestMap(ctx, realArg.Thing)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newThriftTestTestMapArgs() interface{} {
	return thrifttest.NewThriftTestTestMapArgs()
}

func newThriftTestTestMapResult() interface{} {
	return thrifttest.NewThriftTestTestMapResult()
}

func testStringMapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*thrifttest.ThriftTestTestStringMapArgs)
	realResult := result.(*thrifttest.ThriftTestTestStringMapResult)
	success, err := handler.(thrifttest.ThriftTest).TestStringMap(ctx, realArg.Thing)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newThriftTestTestStringMapArgs() interface{} {
	return thrifttest.NewThriftTestTestStringMapArgs()
}

func newThriftTestTestStringMapResult() interface{} {
	return thrifttest.NewThriftTestTestStringMapResult()
}

func testSetHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*thrifttest.ThriftTestTestSetArgs)
	realResult := result.(*thrifttest.ThriftTestTestSetResult)
	success, err := handler.(thrifttest.ThriftTest).TestSet(ctx, realArg.Thing)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newThriftTestTestSetArgs() interface{} {
	return thrifttest.NewThriftTestTestSetArgs()
}

func newThriftTestTestSetResult() interface{} {
	return thrifttest.NewThriftTestTestSetResult()
}

func testListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*thrifttest.ThriftTestTestListArgs)
	realResult := result.(*thrifttest.ThriftTestTestListResult)
	success, err := handler.(thrifttest.ThriftTest).TestList(ctx, realArg.Thing)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newThriftTestTestListArgs() interface{} {
	return thrifttest.NewThriftTestTestListArgs()
}

func newThriftTestTestListResult() interface{} {
	return thrifttest.NewThriftTestTestListResult()
}

func testEnumHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*thrifttest.ThriftTestTestEnumArgs)
	realResult := result.(*thrifttest.ThriftTestTestEnumResult)
	success, err := handler.(thrifttest.ThriftTest).TestEnum(ctx, realArg.Thing)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newThriftTestTestEnumArgs() interface{} {
	return thrifttest.NewThriftTestTestEnumArgs()
}

func newThriftTestTestEnumResult() interface{} {
	return thrifttest.NewThriftTestTestEnumResult()
}

func testTypedefHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*thrifttest.ThriftTestTestTypedefArgs)
	realResult := result.(*thrifttest.ThriftTestTestTypedefResult)
	success, err := handler.(thrifttest.ThriftTest).TestTypedef(ctx, realArg.Thing)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newThriftTestTestTypedefArgs() interface{} {
	return thrifttest.NewThriftTestTestTypedefArgs()
}

func newThriftTestTestTypedefResult() interface{} {
	return thrifttest.NewThriftTestTestTypedefResult()
}

func testMapMapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*thrifttest.ThriftTestTestMapMapArgs)
	realResult := result.(*thrifttest.ThriftTestTestMapMapResult)
	success, err := handler.(thrifttest.ThriftTest).TestMapMap(ctx, realArg.Hello)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newThriftTestTestMapMapArgs() interface{} {
	return thrifttest.NewThriftTestTestMapMapArgs()
}

func newThriftTestTestMapMapResult() interface{} {
	return thrifttest.NewThriftTestTestMapMapResult()
}

func testInsanityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*thrifttest.ThriftTestTestInsanityArgs)
	realResult := result.(*thrifttest.ThriftTestTestInsanityResult)
	success, err := handler.(thrifttest.ThriftTest).TestInsanity(ctx, realArg.Argument)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newThriftTestTestInsanityArgs() interface{} {
	return thrifttest.NewThriftTestTestInsanityArgs()
}

func newThriftTestTestInsanityResult() interface{} {
	return thrifttest.NewThriftTestTestInsanityResult()
}

func testMultiHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*thrifttest.ThriftTestTestMultiArgs)
	realResult := result.(*thrifttest.ThriftTestTestMultiResult)
	success, err := handler.(thrifttest.ThriftTest).TestMulti(ctx, realArg.Arg0, realArg.Arg1, realArg.Arg2, realArg.Arg3, realArg.Arg4, realArg.Arg5)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newThriftTestTestMultiArgs() interface{} {
	return thrifttest.NewThriftTestTestMultiArgs()
}

func newThriftTestTestMultiResult() interface{} {
	return thrifttest.NewThriftTestTestMultiResult()
}

func testExceptionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*thrifttest.ThriftTestTestExceptionArgs)
	realResult := result.(*thrifttest.ThriftTestTestExceptionResult)
	err := handler.(thrifttest.ThriftTest).TestException(ctx, realArg.Arg)
	if err != nil {
		switch v := err.(type) {
		case *thrifttest.Xception:
			realResult.Err1 = v
		default:
			return err
		}
	} else {
	}
	return nil
}
func newThriftTestTestExceptionArgs() interface{} {
	return thrifttest.NewThriftTestTestExceptionArgs()
}

func newThriftTestTestExceptionResult() interface{} {
	return thrifttest.NewThriftTestTestExceptionResult()
}

func testMultiExceptionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*thrifttest.ThriftTestTestMultiExceptionArgs)
	realResult := result.(*thrifttest.ThriftTestTestMultiExceptionResult)
	success, err := handler.(thrifttest.ThriftTest).TestMultiException(ctx, realArg.Arg0, realArg.Arg1)
	if err != nil {
		switch v := err.(type) {
		case *thrifttest.Xception:
			realResult.Err1 = v
		case *thrifttest.Xception2:
			realResult.Err2 = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newThriftTestTestMultiExceptionArgs() interface{} {
	return thrifttest.NewThriftTestTestMultiExceptionArgs()
}

func newThriftTestTestMultiExceptionResult() interface{} {
	return thrifttest.NewThriftTestTestMultiExceptionResult()
}

func testOnewayHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*thrifttest.ThriftTestTestOnewayArgs)

	err := handler.(thrifttest.ThriftTest).TestOneway(ctx, realArg.SecondsToSleep)
	if err != nil {
		return err
	}

	return nil
}
func newThriftTestTestOnewayArgs() interface{} {
	return thrifttest.NewThriftTestTestOnewayArgs()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) TestVoid(ctx context.Context) (err error) {
	var _args thrifttest.ThriftTestTestVoidArgs
	var _result thrifttest.ThriftTestTestVoidResult
	if err = p.c.Call(ctx, "testVoid", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) TestString(ctx context.Context, thing string) (r string, err error) {
	var _args thrifttest.ThriftTestTestStringArgs
	_args.Thing = thing
	var _result thrifttest.ThriftTestTestStringResult
	if err = p.c.Call(ctx, "testString", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) TestBool(ctx context.Context, thing bool) (r bool, err error) {
	var _args thrifttest.ThriftTestTestBoolArgs
	_args.Thing = thing
	var _result thrifttest.ThriftTestTestBoolResult
	if err = p.c.Call(ctx, "testBool", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) TestByte(ctx context.Context, thing int8) (r int8, err error) {
	var _args thrifttest.ThriftTestTestByteArgs
	_args.Thing = thing
	var _result thrifttest.ThriftTestTestByteResult
	if err = p.c.Call(ctx, "testByte", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) TestI32(ctx context.Context, thing int32) (r int32, err error) {
	var _args thrifttest.ThriftTestTestI32Args
	_args.Thing = thing
	var _result thrifttest.ThriftTestTestI32Result
	if err = p.c.Call(ctx, "testI32", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) TestI64(ctx context.Context, thing int64) (r int64, err error) {
	var _args thrifttest.ThriftTestTestI64Args
	_args.Thing = thing
	var _result thrifttest.ThriftTestTestI64Result
	if err = p.c.Call(ctx, "testI64", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) TestDouble(ctx context.Context, thing float64) (r float64, err error) {
	var _args thrifttest.ThriftTestTestDoubleArgs
	_args.Thing = thing
	var _result thrifttest.ThriftTestTestDoubleResult
	if err = p.c.Call(ctx, "testDouble", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) TestBinary(ctx context.Context, thing []byte) (r []byte, err error) {
	var _args thrifttest.ThriftTestTestBinaryArgs
	_args.Thing = thing
	var _result thrifttest.ThriftTestTestBinaryResult
	if err = p.c.Call(ctx, "testBinary", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) TestStruct(ctx context.Context, thing *thrifttest.Xtruct) (r *thrifttest.Xtruct, err error) {
	var _args thrifttest.ThriftTestTestStructArgs
	_args.Thing = thing
	var _result thrifttest.ThriftTestTestStructResult
	if err = p.c.Call(ctx, "testStruct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) TestNest(ctx context.Context, thing *thrifttest.Xtruct2) (r *thrifttest.Xtruct2, err error) {
	var _args thrifttest.ThriftTestTestNestArgs
	_args.Thing = thing
	var _result thrifttest.ThriftTestTestNestResult
	if err = p.c.Call(ctx, "testNest", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) TestMap(ctx context.Context, thing map[int32]int32) (r map[int32]int32, err error) {
	var _args thrifttest.ThriftTestTestMapArgs
	_args.Thing = thing
	var _result thrifttest.ThriftTestTestMapResult
	if err = p.c.Call(ctx, "testMap", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) TestStringMap(ctx context.Context, thing map[string]string) (r map[string]string, err error) {
	var _args thrifttest.ThriftTestTestStringMapArgs
	_args.Thing = thing
	var _result thrifttest.ThriftTestTestStringMapResult
	if err = p.c.Call(ctx, "testStringMap", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) TestSet(ctx context.Context, thing []int32) (r []int32, err error) {
	var _args thrifttest.ThriftTestTestSetArgs
	_args.Thing = thing
	var _result thrifttest.ThriftTestTestSetResult
	if err = p.c.Call(ctx, "testSet", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) TestList(ctx context.Context, thing []int32) (r []int32, err error) {
	var _args thrifttest.ThriftTestTestListArgs
	_args.Thing = thing
	var _result thrifttest.ThriftTestTestListResult
	if err = p.c.Call(ctx, "testList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) TestEnum(ctx context.Context, thing thrifttest.Numberz) (r thrifttest.Numberz, err error) {
	var _args thrifttest.ThriftTestTestEnumArgs
	_args.Thing = thing
	var _result thrifttest.ThriftTestTestEnumResult
	if err = p.c.Call(ctx, "testEnum", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) TestTypedef(ctx context.Context, thing thrifttest.UserId) (r thrifttest.UserId, err error) {
	var _args thrifttest.ThriftTestTestTypedefArgs
	_args.Thing = thing
	var _result thrifttest.ThriftTestTestTypedefResult
	if err = p.c.Call(ctx, "testTypedef", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) TestMapMap(ctx context.Context, hello int32) (r map[int32]map[int32]int32, err error) {
	var _args thrifttest.ThriftTestTestMapMapArgs
	_args.Hello = hello
	var _result thrifttest.ThriftTestTestMapMapResult
	if err = p.c.Call(ctx, "testMapMap", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) TestInsanity(ctx context.Context, argument *thrifttest.Insanity) (r map[thrifttest.UserId]map[thrifttest.Numberz]*thrifttest.Insanity, err error) {
	var _args thrifttest.ThriftTestTestInsanityArgs
	_args.Argument = argument
	var _result thrifttest.ThriftTestTestInsanityResult
	if err = p.c.Call(ctx, "testInsanity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) TestMulti(ctx context.Context, arg0 int8, arg1 int32, arg2 int64, arg3 map[int16]string, arg4 thrifttest.Numberz, arg5 thrifttest.UserId) (r *thrifttest.Xtruct, err error) {
	var _args thrifttest.ThriftTestTestMultiArgs
	_args.Arg0 = arg0
	_args.Arg1 = arg1
	_args.Arg2 = arg2
	_args.Arg3 = arg3
	_args.Arg4 = arg4
	_args.Arg5 = arg5
	var _result thrifttest.ThriftTestTestMultiResult
	if err = p.c.Call(ctx, "testMulti", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) TestException(ctx context.Context, arg string) (err error) {
	var _args thrifttest.ThriftTestTestExceptionArgs
	_args.Arg = arg
	var _result thrifttest.ThriftTestTestExceptionResult
	if err = p.c.Call(ctx, "testException", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) TestMultiException(ctx context.Context, arg0 string, arg1 string) (r *thrifttest.Xtruct, err error) {
	var _args thrifttest.ThriftTestTestMultiExceptionArgs
	_args.Arg0 = arg0
	_args.Arg1 = arg1
	var _result thrifttest.ThriftTestTestMultiExceptionResult
	if err = p.c.Call(ctx, "testMultiException", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err1 != nil:
		return r, _result.Err1
	case _result.Err2 != nil:
		return r, _result.Err2
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) TestOneway(ctx context.Context, secondsToSleep int32) (err error) {
	var _args thrifttest.ThriftTestTestOnewayArgs
	_args.SecondsToSleep = secondsToSleep
	if err = p.c.Call(ctx, "testOneway", &_args, nil); err != nil {
		return
	}
	return nil
}
